{
  "version": 3,
  "sources": [
    "../../smart_asa/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;AAEe;;AAA6B;;AAA7B;AAAP;AACO;;AAAuB;;AAAvB;AAAP;AACO;;AAAA;AAAP;AACO;;AAAsB;AAAtB;AAAP;AAIA;;AAAa;AAAb;AACA;;AAAgB;AAAhB;AACA;;AAAsB;AAAtB;AACA;;AAAiB;;AAAjB;AACA;;AAAY;;AAAZ;AACA;;AAAW;;AAAX;AACA;;AAAqB;;AAArB;AACA;;AAAoB;;AAApB;AACA;AAAoB;;AAApB;AACA;;AAAmB;;AAAnB;AACA;AAAqB;;AAArB;AAEA;AAAoB;AAApB;AACA;;AAAqB;AAArB;;AAnCR;;;AAAA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAgNK;;AAAA;AAAA;AAAA;;AAAA;AAhNL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAgNK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqDA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AArQL;;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqQK;;;AAAA;AAAA;AAwCA;;AAAA;AAAA;AAAA;;AAAA;AA7SL;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA6SK;;;AAAA;AAAA;AAyDA;;AAAA;AAAA;AAAA;;AAAA;AAtWL;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsWK;;;AAAA;AAAA;AA0CA;;AAAA;AAAA;AAAA;;AAAA;AAhZL;;;AAAA;AAAA;;AAAA;;;AAgZK;;;AAAA;AAAA;AAgBA;;AAAA;AAAA;AAAA;;AAAA;AAhaL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAgaK;;;AAAA;AAAA;AAsBA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAtbL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAsbK;;;AAAA;AAAA;AA8BA;;AAAA;AAAA;AAAA;;AAAA;AApdL;;;AAAA;AAAA;;AAodK;;;AAAA;AAAA;AA4BA;;AAAA;AAAA;AAAA;;AAAA;AAhfL;;;AAAA;AAAA;;AAgfK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;;AAAA;AAAA;AAAA;;AAAA;AA7gBL;;;AAAA;AAAA;;AA6gBK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;;AAAA;AAAA;AAAA;;AAAA;AA9hBL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA8hBK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;;AAAA;AAAA;AAAA;;AAAA;AAljBL;;;AAAA;AAAA;;AAkjBK;;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAljBL;;AAAA;;;;;;;;;AAAA;AAAA;AAgNA;;;AAmCe;;AAAc;;AAAd;AAAP;AACW;AAAA;AAAA;AAAA;AAAJ;AAAP;AAGoB;;;AAApB;AAAA;AAAA;AACa;;AAAA;AAAb;;AAAA;AAAA;AACgB;;AAAA;AAAhB;;AAAA;AAAA;AACsB;;;AAAA;AAAtB;;AAAA;AAAA;AACiB;;AAAA;;;AAAjB;;AAAA;AAAA;AACY;;AAAA;;;AAAZ;;AAAA;AAAA;AACW;;AAAA;;;AAAX;;AAAA;AAAA;AACqB;;AAAA;;;AAArB;;AAAA;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACmB;AAAA;AAAA;AAAA;AAAZ;AAAP;AAjGR;;;AAGY;AAOoC;;AAAV;;;AAAlB;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACI;;AACA;;;;;;;;;;;;AAHG;;;;;;;;;;;;;AADD;;;;;;;;;AADK;;;AADN;;;AADH;;;;AAFV;;;;AACQ;;;AADR;AAAA;;AADJ;AA1HR;;;AAGc;;AACd;;AAAA;;;AACyB;;AAAI;;AAAJ;AAHR;;;;;;;;;;;;AAGC;AAAA;AAAA;AAAN;;AAAM;AAAN;;AACA;;AAAM;;AAAN;AAAA;;;;;AACG;;AAAA;AAAA;AAAO;;;AAAP;;AAAA;AAAP;AAAA;AAoNR;;;AAYQ;;AAAA;;;AAEI;;AAAA;;AAAwB;AAAxB;AADJ;AAGO;;AAAA;;AAAiC;AAAA;AAAA;AAAA;AAAjC;AAAP;AACO;;AAAA;;AAA0B;;AAA1B;AAAP;AACO;;AAAA;;AAAkC;;AAAlC;AAAP;AAEI;;AAAA;;AAAA;AADJ;AAII;;AAAA;;AAAkC;;AAAlC;AADJ;AAGO;;AAAqB;AAArB;AAAP;AACO;;AAAA;;AAAA;;AAAA;;AAAP;AAKwC;AAAA;AAAA;AAAA;AAAd;;AAA1B;AAAA;;AAAA;AACoB;;AAApB;;AAAkC;AAAlC;AAII;AAAA;;AAAA;AAAA;AAAA;;;AAAqC;;AAAd;;AAAA;;AAAA;AAAvB;;;AAEoB;;AAApB;;AAAkC;AAAlC;;AApPZ;;;AAEe;AAAA;AAAA;AAAA;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAP;;AAmPR;;;AAkCQ;;AAAA;;;AACO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACmB;AAAA;AAAA;AAAA;AAAhB;;AAAA;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAqB;;AAArB;AAAP;AACc;AAAA;;AAAA;AAAA;AAAf;;AAAA;AAAX;;;AACmB;AAAA;;AAAA;AAAA;AAAoB;;AAApB;AAAP;AACgB;AAAA;AAAA;AAAA;AAAjB;;AAAA;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAsB;;AAAtB;AAAP;AACY;;AAAA;;;AAAT;AAAA;;AAAA;AAAP;AAGa;;AAAA;AAAb;;AAAA;AAAA;AACgB;;AAAA;AAAhB;;AAAA;AAAA;AACsB;;;AAAA;AAAtB;;AAAA;AAAA;AACiB;;AAAA;;;AAAjB;;AAAA;AAAA;AACY;;AAAA;;;AAAZ;;AAAA;AAAA;AACW;;AAAA;;;AAAX;;AAAA;AAAA;AACqB;;AAAA;;;AAArB;;AAAA;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;;AAjTR;;;AAE8C;;AAAnB;;AAAA;;AAAA;AAAZ;;AAAA;AAAA;AAAP;AAiTR;;;AAkBQ;;AAAA;;;AACG;;AAAgB;;AAAhB;AAAX;;;AAE4D;;AAAA;AADhD;;AAAA;AAAA;;;;;;AAGC;;AAAkB;;AAAlB;AAAb;;;AACY;;AAAA;;;;;;AACC;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAb;;;AACY;;AAAA;;AAAA;;;;;;AAIA;;AAAA;;AAAA;;;AAOa;;AAAA;AAFjB;;AAAA;AAAA;;AAAA;;AAAA;;;;AA7UR;;;AAKe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAEO;;AAAkB;;AAAlB;AAAP;AAEiD;AAAA;AAAA;AAAA;AAA9B;;;AAAf;;AAAA;AACG;AAAA;;AAAA;AAAA;AADH;AADJ;AAMI;;AAAA;AAAA;AAAA;AAAA;AAA6C;AAAA;AAAA;AAAA;AAA7C;AADJ;AAGW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACG;AAAA;AAAA;AAAA;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAX;;;AACuB;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AAEZ;;;AAGe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGI;;AAAA;AAAA;AAAA;AAAA;AAA2C;AAAA;AAAA;AAAA;AAA3C;AADJ;AAGW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACG;AAAA;AAAA;AAAA;AAAqB;AAAA;AAAA;AAAA;AAArB;AAAX;;;AACuB;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;AAEuB;AAAA;AAAA;AAAA;AAAhB;;AAAA;AAAP;;AAEZ;;;AAMY;;AAAA;AAAA;AAAA;AAAA;AAA2C;AAAA;AAAA;AAAA;AAA3C;AADJ;AAII;;AAAA;AAAA;AAAA;AAAA;AAA6C;AAAA;AAAA;AAAA;AAA7C;AADJ;;AAIR;;;AAIe;;AAAA;;AAAA;AAAP;AAGI;;AAAA;AAAA;AAAA;AAAA;AAA2C;AAAA;AAAA;AAAA;AAA3C;AADJ;AAII;;AAAA;AAAA;AAAA;AAAA;AAA6C;AAAA;AAAA;AAAA;AAA7C;AADJ;AAGW;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACW;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACW;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AA8DR;;;AASQ;AAMW;;;;;;;;;;;;;;;;;;;;AANX;;;AACQ;;;AADR;;AAiNR;;;AAUQ;;AAAA;;;AACO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAGqB;;;AAAA;AAArB;;AAAA;AAAA;;AAER;;;AAaQ;;AAAA;;;AAEI;;AAAA;AAAA;AAAA;AAAA;AAA6C;AAAA;AAAA;AAAA;AAA7C;AADJ;AAGO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAGsC;;;AAAA;AAAtC;;AAAA;;AAAA;;AAAA;;AAER;;;AAUQ;;AAAA;;;AACoB;;AAAA;;AAC5B;;;AACY;;AAAA;;AAAA;AAAA;;AAAA;;;AAEI;;AAAA;AADhB;;;AAIoB;;AAAA;AAAA;AAAA;AAAA;AAAuC;AAAA;AAAA;AAAA;AAAvC;AADJ;AAGA;;AAAA;;;AAKiC;;AAApB;;AAAA;;AAAA;AACA;;AAHjB;;AAAA;;AAAA;;AAAA;;;;AAnVZ;;;AAEqC;;AAAkB;AAAlB;AACT;AAAA;;AAAA;AAAA;AAAA;AACb;;AAAqB;AAArB;AAAP;AAE8B;;AAA1B;AAAA;AAAA;AAAA;AAAA;;AAAA;AADJ;AAII;;AAAA;;AAAA;AADJ;AAOI;AAAA;;AAAA;;AAAA;AADJ;AAGO;AAAA;;AAA4B;;AAA5B;AAAP;AACO;AAAA;;AAAA;AAAP;AAEI;;AAAoC;;AAApC;AADJ;;AAIR;;;AAIqC;;AAAkB;AAAlB;AACT;AAAA;;AAAA;AAAA;AAAA;AAEhB;;AAAA;;AAAA;AADJ;AAGyB;AAAA;AAAA;AAAA;AAAlB;;AAAA;AAAP;;AAER;;;AAEmB;AAAA;;AAAA;AAAA;AAAJ;AAAP;AAC+B;;AAApB;AAAA;;AAAA;AAAA;AAAJ;AAAP;AACW;;AAAA;AAAA;;AAAA;AAAA;AAAJ;AAAP;;AAoTR;;;AASQ;;AAAA;;;AACO;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAGA;;AAAA;;;AACA;;AAAa;AAAb;AACA;;AAAgB;AAAhB;AACA;;AAAsB;AAAtB;AACA;;AAAiB;;AAAjB;AACA;;AAAY;;AAAZ;AACA;;AAAW;;AAAX;AACA;;AAAqB;;AAArB;AACA;;AAAoB;;AAApB;AACA;AAAoB;;AAApB;AACA;;AAAmB;;AAAnB;AACA;AAAqB;;AAArB;AACA;AAAoB;AAApB;AACA;;AAAqB;AAArB;;AAtSR;;;AAEQ;AAGW;;;;;;;;AAHX;;;;AACQ;;;AADR;;AAsSR;;;AAYQ;;AAAA;;;AAIsB;AAAA;;AAAA;AAAA;AAAZ;AACe;AAAA;;AAAA;AAAA;AAAZ;AAAA;;;AACgB;AAAA;;AAAA;AAAA;AAAV;;AAAA;AAAA;;AAAA;AACO;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACO;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACW;AAAA;;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAC4B;AAAA;;AAAA;AAAA;AAAlB;AAAA;AAAA;AAAA;;;AAAA;AAAA;AACY;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACD;AAAA;;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAXxB;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAP;AAcR;;;AAYQ;;AAAA;;;AAGiB;AAAA;;AAAA;AAAA;AAAV;;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAeQ;;AAAA;;;AAGiB;;AAAA;AAAA;;AAAA;AAAA;AAAV;;AAAA;AAAA;;AAAA;AAAP;AAER;;;AAYQ;;AAAA;;;AAGmB;;AAAA;;;AAAZ;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.approval_program",
      "params": {},
      "block": "smart_contracts.smart_asa.contract.SmartAsa.approval_program",
      "stack_in": [],
      "op": "intcblock 0 1 4 2 18446744073709551615"
    },
    "17": {
      "op": "bytecblock \"smart_asa_id\" \"reserve_addr\" \"clawback_addr\" \"account_smart_asa_id\" \"account_frozen\" \"freeze_addr\" \"global_frozen\" \"manager_addr\" \"total\" \"default_frozen\" \"decimals\" \"unit_name\" \"name\" \"url\" \"metadata_hash\" 0x151f7c75 0x00"
    },
    "204": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "206": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "209": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.__init__",
      "op": "callsub __init__"
    },
    "212": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.__puya_arc4_router__",
      "op": "callsub __puya_arc4_router__",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "215": {
      "op": "return",
      "stack_out": []
    },
    "216": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.__init__",
      "params": {},
      "block": "__init__",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "219": {
      "op": "txn GlobalNumByteSlice",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "221": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "8"
      ]
    },
    "223": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "224": {
      "error": "Wrong Global Bytes allocation",
      "op": "assert // Wrong Global Bytes allocation",
      "stack_out": []
    },
    "225": {
      "op": "txn GlobalNumUint",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "227": {
      "op": "pushint 5 // 5",
      "defined_out": [
        "5",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "5"
      ]
    },
    "229": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "230": {
      "error": "Wrong Global UInts allocation",
      "op": "assert // Wrong Global UInts allocation",
      "stack_out": []
    },
    "231": {
      "op": "txn LocalNumByteSlice",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "233": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "234": {
      "error": "Wrong Local Bytes allocation",
      "op": "assert // Wrong Local Bytes allocation",
      "stack_out": []
    },
    "235": {
      "op": "txn LocalNumUint",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "237": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "2"
      ]
    },
    "238": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "239": {
      "error": "Wrong Local UInts allocation",
      "op": "assert // Wrong Local UInts allocation",
      "stack_out": []
    },
    "240": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\""
      ],
      "stack_out": [
        "\"total\""
      ]
    },
    "242": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"total\"",
        "0"
      ],
      "stack_out": [
        "\"total\"",
        "0"
      ]
    },
    "243": {
      "op": "app_global_put",
      "stack_out": []
    },
    "244": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\""
      ],
      "stack_out": [
        "\"decimals\""
      ]
    },
    "246": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"decimals\"",
        "0"
      ]
    },
    "247": {
      "op": "app_global_put",
      "stack_out": []
    },
    "248": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\""
      ],
      "stack_out": [
        "\"default_frozen\""
      ]
    },
    "250": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"default_frozen\"",
        "0"
      ]
    },
    "251": {
      "op": "app_global_put",
      "stack_out": []
    },
    "252": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\""
      ],
      "stack_out": [
        "\"unit_name\""
      ]
    },
    "254": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"unit_name\""
      ],
      "stack_out": [
        "\"unit_name\"",
        "\"\""
      ]
    },
    "256": {
      "op": "app_global_put",
      "stack_out": []
    },
    "257": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\""
      ],
      "stack_out": [
        "\"name\""
      ]
    },
    "259": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"name\"",
        "\"\""
      ]
    },
    "261": {
      "op": "app_global_put",
      "stack_out": []
    },
    "262": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\""
      ],
      "stack_out": [
        "\"url\""
      ]
    },
    "264": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"url\"",
        "\"\""
      ]
    },
    "266": {
      "op": "app_global_put",
      "stack_out": []
    },
    "267": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\""
      ],
      "stack_out": [
        "\"metadata_hash\""
      ]
    },
    "269": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"metadata_hash\"",
        "0x"
      ],
      "stack_out": [
        "\"metadata_hash\"",
        "0x"
      ]
    },
    "271": {
      "op": "app_global_put",
      "stack_out": []
    },
    "272": {
      "op": "bytec 7 // \"manager_addr\""
    },
    "274": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"manager_addr\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_addr\"",
        "new_state_value%0#0"
      ]
    },
    "276": {
      "op": "app_global_put",
      "stack_out": []
    },
    "277": {
      "op": "bytec_1 // \"reserve_addr\""
    },
    "278": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"reserve_addr\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"reserve_addr\"",
        "new_state_value%1#0"
      ]
    },
    "280": {
      "op": "app_global_put",
      "stack_out": []
    },
    "281": {
      "op": "bytec 5 // \"freeze_addr\""
    },
    "283": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"freeze_addr\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "\"freeze_addr\"",
        "new_state_value%2#0"
      ]
    },
    "285": {
      "op": "app_global_put",
      "stack_out": []
    },
    "286": {
      "op": "bytec_2 // \"clawback_addr\""
    },
    "287": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"clawback_addr\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "\"clawback_addr\"",
        "new_state_value%3#0"
      ]
    },
    "289": {
      "op": "app_global_put",
      "stack_out": []
    },
    "290": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\""
      ],
      "stack_out": [
        "\"smart_asa_id\""
      ]
    },
    "291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"smart_asa_id\"",
        "0"
      ]
    },
    "292": {
      "op": "app_global_put",
      "stack_out": []
    },
    "293": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\""
      ],
      "stack_out": [
        "\"global_frozen\""
      ]
    },
    "295": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"global_frozen\"",
        "0"
      ]
    },
    "296": {
      "op": "app_global_put",
      "stack_out": []
    },
    "297": {
      "retsub": true,
      "op": "retsub"
    },
    "298": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.__puya_arc4_router__",
      "params": {},
      "block": "__puya_arc4_router__",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "301": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "303": {
      "op": "bz __puya_arc4_router___bare_routing@16",
      "stack_out": []
    },
    "306": {
      "op": "pushbytess 0xe7ecd5a8 0x6431365e 0xee6a84aa 0x2fc743a8 0x15cf2ba3 0x7b351ce5 0xe6802826 0x4b17bf20 0xce2f05f3 0x127fb717 0x026f8a9d 0xe97483bf // method \"asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64\", method \"asset_opt_in(asset,axfer)void\", method \"asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void\", method \"asset_transfer(asset,uint64,account,account)void\", method \"asset_freeze(asset,bool)void\", method \"account_freeze(asset,account,bool)void\", method \"asset_close_out(asset,account)void\", method \"asset_destroy(asset)void\", method \"get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)\", method \"get_asset_is_frozen(asset)bool\", method \"get_account_is_frozen(asset,account)bool\", method \"get_circulating_supply(asset)uint64\""
    },
    "368": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(account_freeze(asset,account,bool)void)",
        "Method(asset_close_out(asset,account)void)",
        "Method(asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void)",
        "Method(asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64)",
        "Method(asset_destroy(asset)void)",
        "Method(asset_freeze(asset,bool)void)",
        "Method(asset_opt_in(asset,axfer)void)",
        "Method(asset_transfer(asset,uint64,account,account)void)",
        "Method(get_account_is_frozen(asset,account)bool)",
        "Method(get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address))",
        "Method(get_asset_is_frozen(asset)bool)",
        "Method(get_circulating_supply(asset)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64)",
        "Method(asset_opt_in(asset,axfer)void)",
        "Method(asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void)",
        "Method(asset_transfer(asset,uint64,account,account)void)",
        "Method(asset_freeze(asset,bool)void)",
        "Method(account_freeze(asset,account,bool)void)",
        "Method(asset_close_out(asset,account)void)",
        "Method(asset_destroy(asset)void)",
        "Method(get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address))",
        "Method(get_asset_is_frozen(asset)bool)",
        "Method(get_account_is_frozen(asset,account)bool)",
        "Method(get_circulating_supply(asset)uint64)",
        "tmp%2#0"
      ]
    },
    "371": {
      "op": "match __puya_arc4_router___asset_create_route@2 __puya_arc4_router___asset_opt_in_route@3 __puya_arc4_router___asset_config_route@4 __puya_arc4_router___asset_transfer_route@5 __puya_arc4_router___asset_freeze_route@6 __puya_arc4_router___account_freeze_route@7 __puya_arc4_router___asset_close_out_route@8 __puya_arc4_router___asset_destroy_route@9 __puya_arc4_router___get_asset_config_route@10 __puya_arc4_router___get_asset_is_frozen_route@11 __puya_arc4_router___get_account_is_frozen_route@12 __puya_arc4_router___get_circulating_supply_route@13",
      "stack_out": []
    },
    "397": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "398": {
      "retsub": true,
      "op": "retsub"
    },
    "399": {
      "block": "__puya_arc4_router___asset_create_route@2",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "401": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "402": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "403": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "405": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "406": {
      "op": "txna ApplicationArgs 1"
    },
    "409": {
      "op": "txna ApplicationArgs 2"
    },
    "412": {
      "op": "txna ApplicationArgs 3"
    },
    "415": {
      "op": "txna ApplicationArgs 4"
    },
    "418": {
      "op": "txna ApplicationArgs 5"
    },
    "421": {
      "op": "txna ApplicationArgs 6"
    },
    "424": {
      "op": "txna ApplicationArgs 7"
    },
    "427": {
      "op": "txna ApplicationArgs 8"
    },
    "430": {
      "op": "txna ApplicationArgs 9"
    },
    "433": {
      "op": "txna ApplicationArgs 10"
    },
    "436": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "439": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_create",
      "op": "callsub asset_create",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "442": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "0x151f7c75"
      ]
    },
    "444": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%18#0"
      ]
    },
    "445": {
      "op": "concat",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "446": {
      "op": "log",
      "stack_out": []
    },
    "447": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "448": {
      "retsub": true,
      "op": "retsub"
    },
    "449": {
      "block": "__puya_arc4_router___asset_opt_in_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "451": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "OptIn"
      ]
    },
    "452": {
      "op": "==",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "453": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "454": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "456": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "457": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "460": {
      "op": "btoi",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "461": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "463": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "465": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "tmp%27#0",
        "1"
      ]
    },
    "466": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "gtxn_idx%0#0"
      ]
    },
    "467": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "468": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "470": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "471": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "472": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%26#0",
        "gtxn_idx%0#0"
      ]
    },
    "473": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_opt_in",
      "op": "callsub asset_opt_in",
      "stack_out": []
    },
    "476": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "477": {
      "retsub": true,
      "op": "retsub"
    },
    "478": {
      "block": "__puya_arc4_router___asset_config_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "480": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "481": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "482": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "484": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "485": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "488": {
      "op": "btoi",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "489": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "491": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "494": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0"
      ]
    },
    "497": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0"
      ]
    },
    "500": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0"
      ]
    },
    "503": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "506": {
      "op": "txna ApplicationArgs 7",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "509": {
      "op": "txna ApplicationArgs 8",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "512": {
      "op": "txna ApplicationArgs 9",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0"
      ]
    },
    "515": {
      "op": "txna ApplicationArgs 10",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "518": {
      "op": "txna ApplicationArgs 11",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0"
      ]
    },
    "521": {
      "op": "txna ApplicationArgs 12",
      "defined_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%34#0",
        "tmp%35#0",
        "tmp%36#0",
        "tmp%37#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0",
        "tmp%42#0",
        "tmp%43#0",
        "tmp%44#0",
        "tmp%45#0"
      ]
    },
    "524": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_config",
      "op": "callsub asset_config",
      "stack_out": []
    },
    "527": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "528": {
      "retsub": true,
      "op": "retsub"
    },
    "529": {
      "block": "__puya_arc4_router___asset_transfer_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "531": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "532": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "533": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "535": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "536": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "539": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "540": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "542": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "545": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%54#0"
      ]
    },
    "548": {
      "op": "btoi",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%55#0"
      ]
    },
    "549": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%56#0"
      ]
    },
    "551": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%56#0",
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%56#0",
        "tmp%57#0"
      ]
    },
    "554": {
      "op": "btoi",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%56#0",
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%56#0",
        "tmp%58#0"
      ]
    },
    "555": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%56#0",
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "tmp%53#0",
        "tmp%56#0",
        "tmp%59#0"
      ]
    },
    "557": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_transfer",
      "op": "callsub asset_transfer",
      "stack_out": []
    },
    "560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "561": {
      "retsub": true,
      "op": "retsub"
    },
    "562": {
      "block": "__puya_arc4_router___asset_freeze_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "564": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "565": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "566": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "568": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "569": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "572": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "573": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "575": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%66#0",
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%66#0",
        "tmp%67#0"
      ]
    },
    "578": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_freeze",
      "op": "callsub asset_freeze",
      "stack_out": []
    },
    "581": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "582": {
      "retsub": true,
      "op": "retsub"
    },
    "583": {
      "block": "__puya_arc4_router___account_freeze_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "585": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "586": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "587": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "589": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "590": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "593": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "594": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "596": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%74#0",
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%75#0"
      ]
    },
    "599": {
      "op": "btoi",
      "defined_out": [
        "tmp%74#0",
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%76#0"
      ]
    },
    "600": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%74#0",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%77#0"
      ]
    },
    "602": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%74#0",
        "tmp%77#0",
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%74#0",
        "tmp%77#0",
        "tmp%78#0"
      ]
    },
    "605": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.account_freeze",
      "op": "callsub account_freeze",
      "stack_out": []
    },
    "608": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "609": {
      "retsub": true,
      "op": "retsub"
    },
    "610": {
      "block": "__puya_arc4_router___asset_close_out_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "612": {
      "op": "intc_3 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "CloseOut"
      ]
    },
    "613": {
      "op": "==",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "614": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "615": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "617": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "618": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "621": {
      "op": "btoi",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "622": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "624": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%85#0",
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "tmp%86#0"
      ]
    },
    "627": {
      "op": "btoi",
      "defined_out": [
        "tmp%85#0",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "tmp%87#0"
      ]
    },
    "628": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%85#0",
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "tmp%88#0"
      ]
    },
    "630": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_close_out",
      "op": "callsub asset_close_out",
      "stack_out": []
    },
    "633": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "634": {
      "retsub": true,
      "op": "retsub"
    },
    "635": {
      "block": "__puya_arc4_router___asset_destroy_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "637": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "638": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "639": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "641": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "642": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "645": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "646": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "648": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.asset_destroy",
      "op": "callsub asset_destroy",
      "stack_out": []
    },
    "651": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "652": {
      "retsub": true,
      "op": "retsub"
    },
    "653": {
      "block": "__puya_arc4_router___get_asset_config_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "655": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "656": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "657": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "659": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "660": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "663": {
      "op": "btoi",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "664": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "666": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.get_asset_config",
      "op": "callsub get_asset_config",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "669": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0",
        "0x151f7c75"
      ]
    },
    "671": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%103#0"
      ]
    },
    "672": {
      "op": "concat",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "673": {
      "op": "log",
      "stack_out": []
    },
    "674": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "675": {
      "retsub": true,
      "op": "retsub"
    },
    "676": {
      "block": "__puya_arc4_router___get_asset_is_frozen_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "678": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "679": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "680": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "682": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "683": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%109#0"
      ],
      "stack_out": [
        "tmp%109#0"
      ]
    },
    "686": {
      "op": "btoi",
      "defined_out": [
        "tmp%110#0"
      ],
      "stack_out": [
        "tmp%110#0"
      ]
    },
    "687": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%111#0"
      ],
      "stack_out": [
        "tmp%111#0"
      ]
    },
    "689": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.get_asset_is_frozen",
      "op": "callsub get_asset_is_frozen",
      "defined_out": [
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0"
      ]
    },
    "692": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%112#0"
      ],
      "stack_out": [
        "tmp%112#0",
        "0x151f7c75"
      ]
    },
    "694": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%112#0"
      ]
    },
    "695": {
      "op": "concat",
      "defined_out": [
        "tmp%113#0"
      ],
      "stack_out": [
        "tmp%113#0"
      ]
    },
    "696": {
      "op": "log",
      "stack_out": []
    },
    "697": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "698": {
      "retsub": true,
      "op": "retsub"
    },
    "699": {
      "block": "__puya_arc4_router___get_account_is_frozen_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%114#0"
      ],
      "stack_out": [
        "tmp%114#0"
      ]
    },
    "701": {
      "op": "!",
      "defined_out": [
        "tmp%115#0"
      ],
      "stack_out": [
        "tmp%115#0"
      ]
    },
    "702": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "703": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%116#0"
      ],
      "stack_out": [
        "tmp%116#0"
      ]
    },
    "705": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "706": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%118#0"
      ],
      "stack_out": [
        "tmp%118#0"
      ]
    },
    "709": {
      "op": "btoi",
      "defined_out": [
        "tmp%119#0"
      ],
      "stack_out": [
        "tmp%119#0"
      ]
    },
    "710": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%120#0"
      ],
      "stack_out": [
        "tmp%120#0"
      ]
    },
    "712": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%120#0",
        "tmp%121#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "tmp%121#0"
      ]
    },
    "715": {
      "op": "btoi",
      "defined_out": [
        "tmp%120#0",
        "tmp%122#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "tmp%122#0"
      ]
    },
    "716": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%120#0",
        "tmp%123#0"
      ],
      "stack_out": [
        "tmp%120#0",
        "tmp%123#0"
      ]
    },
    "718": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.get_account_is_frozen",
      "op": "callsub get_account_is_frozen",
      "defined_out": [
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0"
      ]
    },
    "721": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%124#0"
      ],
      "stack_out": [
        "tmp%124#0",
        "0x151f7c75"
      ]
    },
    "723": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%124#0"
      ]
    },
    "724": {
      "op": "concat",
      "defined_out": [
        "tmp%125#0"
      ],
      "stack_out": [
        "tmp%125#0"
      ]
    },
    "725": {
      "op": "log",
      "stack_out": []
    },
    "726": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "727": {
      "retsub": true,
      "op": "retsub"
    },
    "728": {
      "block": "__puya_arc4_router___get_circulating_supply_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%126#0"
      ],
      "stack_out": [
        "tmp%126#0"
      ]
    },
    "730": {
      "op": "!",
      "defined_out": [
        "tmp%127#0"
      ],
      "stack_out": [
        "tmp%127#0"
      ]
    },
    "731": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "732": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%128#0"
      ],
      "stack_out": [
        "tmp%128#0"
      ]
    },
    "734": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "735": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%130#0"
      ],
      "stack_out": [
        "tmp%130#0"
      ]
    },
    "738": {
      "op": "btoi",
      "defined_out": [
        "tmp%131#0"
      ],
      "stack_out": [
        "tmp%131#0"
      ]
    },
    "739": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%132#0"
      ],
      "stack_out": [
        "tmp%132#0"
      ]
    },
    "741": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.get_circulating_supply",
      "op": "callsub get_circulating_supply",
      "defined_out": [
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0"
      ]
    },
    "744": {
      "op": "bytec 15 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%133#0"
      ],
      "stack_out": [
        "tmp%133#0",
        "0x151f7c75"
      ]
    },
    "746": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%133#0"
      ]
    },
    "747": {
      "op": "concat",
      "defined_out": [
        "tmp%134#0"
      ],
      "stack_out": [
        "tmp%134#0"
      ]
    },
    "748": {
      "op": "log",
      "stack_out": []
    },
    "749": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "750": {
      "retsub": true,
      "op": "retsub"
    },
    "751": {
      "block": "__puya_arc4_router___bare_routing@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%135#0"
      ],
      "stack_out": [
        "tmp%135#0"
      ]
    },
    "753": {
      "op": "bnz __puya_arc4_router___after_if_else@20",
      "stack_out": []
    },
    "756": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%136#0"
      ],
      "stack_out": [
        "tmp%136#0"
      ]
    },
    "758": {
      "op": "!",
      "defined_out": [
        "tmp%137#0"
      ],
      "stack_out": [
        "tmp%137#0"
      ]
    },
    "759": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "760": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "761": {
      "retsub": true,
      "op": "retsub"
    },
    "762": {
      "block": "__puya_arc4_router___after_if_else@20",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "763": {
      "retsub": true,
      "op": "retsub"
    },
    "764": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_create",
      "params": {
        "total#0": "bytes",
        "decimals#0": "bytes",
        "default_frozen#0": "bytes",
        "unit_name#0": "bytes",
        "name#0": "bytes",
        "url#0": "bytes",
        "metadata_hash#0": "bytes",
        "manager_addr#0": "bytes",
        "reserve_addr#0": "bytes",
        "freeze_addr#0": "bytes",
        "clawback_addr#0": "bytes"
      },
      "block": "asset_create",
      "stack_in": [],
      "op": "proto 11 1"
    },
    "767": {
      "op": "txn Sender"
    },
    "769": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "771": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "772": {
      "error": "Unauthorized",
      "op": "assert // Unauthorized",
      "stack_out": []
    },
    "773": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "774": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "775": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "776": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "777": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "778": {
      "error": "Controlled ASA already created",
      "op": "assert // Controlled ASA already created",
      "stack_out": []
    },
    "779": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_config",
      "op": "callsub inner_asset_config",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "782": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"smart_asa_id\""
      ]
    },
    "783": {
      "op": "swap",
      "stack_out": [
        "\"smart_asa_id\"",
        "new_state_value%0#0"
      ]
    },
    "784": {
      "op": "app_global_put",
      "stack_out": []
    },
    "785": {
      "op": "frame_dig -11",
      "defined_out": [
        "total#0 (copy)"
      ],
      "stack_out": [
        "total#0 (copy)"
      ]
    },
    "787": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "788": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"total\""
      ]
    },
    "790": {
      "op": "swap",
      "stack_out": [
        "\"total\"",
        "new_state_value%1#0"
      ]
    },
    "791": {
      "op": "app_global_put",
      "stack_out": []
    },
    "792": {
      "op": "frame_dig -10",
      "defined_out": [
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "decimals#0 (copy)"
      ]
    },
    "794": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "795": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"decimals\""
      ]
    },
    "797": {
      "op": "swap",
      "stack_out": [
        "\"decimals\"",
        "new_state_value%2#0"
      ]
    },
    "798": {
      "op": "app_global_put",
      "stack_out": []
    },
    "799": {
      "op": "frame_dig -9",
      "defined_out": [
        "default_frozen#0 (copy)"
      ],
      "stack_out": [
        "default_frozen#0 (copy)"
      ]
    },
    "801": {
      "op": "intc_0 // 0",
      "stack_out": [
        "default_frozen#0 (copy)",
        "0"
      ]
    },
    "802": {
      "op": "getbit",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "803": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"default_frozen\""
      ]
    },
    "805": {
      "op": "swap",
      "stack_out": [
        "\"default_frozen\"",
        "new_state_value%3#0"
      ]
    },
    "806": {
      "op": "app_global_put",
      "stack_out": []
    },
    "807": {
      "op": "frame_dig -8",
      "defined_out": [
        "unit_name#0 (copy)"
      ],
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "809": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "812": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\"",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "\"unit_name\""
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "\"unit_name\"",
        "new_state_value%4#0"
      ]
    },
    "815": {
      "op": "app_global_put",
      "stack_out": []
    },
    "816": {
      "op": "frame_dig -7",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "818": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "821": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\"",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "\"name\""
      ]
    },
    "823": {
      "op": "swap",
      "stack_out": [
        "\"name\"",
        "new_state_value%5#0"
      ]
    },
    "824": {
      "op": "app_global_put",
      "stack_out": []
    },
    "825": {
      "op": "frame_dig -6",
      "defined_out": [
        "url#0 (copy)"
      ],
      "stack_out": [
        "url#0 (copy)"
      ]
    },
    "827": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0"
      ]
    },
    "830": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\"",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0",
        "\"url\""
      ]
    },
    "832": {
      "op": "swap",
      "stack_out": [
        "\"url\"",
        "new_state_value%6#0"
      ]
    },
    "833": {
      "op": "app_global_put",
      "stack_out": []
    },
    "834": {
      "op": "frame_dig -5",
      "defined_out": [
        "metadata_hash#0 (copy)"
      ],
      "stack_out": [
        "metadata_hash#0 (copy)"
      ]
    },
    "836": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0"
      ]
    },
    "839": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\"",
        "new_state_value%7#0"
      ],
      "stack_out": [
        "new_state_value%7#0",
        "\"metadata_hash\""
      ]
    },
    "841": {
      "op": "swap",
      "stack_out": [
        "\"metadata_hash\"",
        "new_state_value%7#0"
      ]
    },
    "842": {
      "op": "app_global_put",
      "stack_out": []
    },
    "843": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\""
      ],
      "stack_out": [
        "\"manager_addr\""
      ]
    },
    "845": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"manager_addr\"",
        "manager_addr#0 (copy)"
      ],
      "stack_out": [
        "\"manager_addr\"",
        "manager_addr#0 (copy)"
      ]
    },
    "847": {
      "op": "app_global_put",
      "stack_out": []
    },
    "848": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\""
      ],
      "stack_out": [
        "\"reserve_addr\""
      ]
    },
    "849": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"reserve_addr\"",
        "reserve_addr#0 (copy)"
      ],
      "stack_out": [
        "\"reserve_addr\"",
        "reserve_addr#0 (copy)"
      ]
    },
    "851": {
      "op": "app_global_put",
      "stack_out": []
    },
    "852": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\""
      ],
      "stack_out": [
        "\"freeze_addr\""
      ]
    },
    "854": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"freeze_addr\"",
        "freeze_addr#0 (copy)"
      ],
      "stack_out": [
        "\"freeze_addr\"",
        "freeze_addr#0 (copy)"
      ]
    },
    "856": {
      "op": "app_global_put",
      "stack_out": []
    },
    "857": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\""
      ],
      "stack_out": [
        "\"clawback_addr\""
      ]
    },
    "858": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"clawback_addr\"",
        "clawback_addr#0 (copy)"
      ],
      "stack_out": [
        "\"clawback_addr\"",
        "clawback_addr#0 (copy)"
      ]
    },
    "860": {
      "op": "app_global_put",
      "stack_out": []
    },
    "861": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "862": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "863": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "864": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "865": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "866": {
      "retsub": true,
      "op": "retsub"
    },
    "867": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_config",
      "params": {},
      "block": "inner_asset_config",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "870": {
      "op": "itxn_begin"
    },
    "871": {
      "op": "global CurrentApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "873": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.itoa",
      "op": "callsub itoa",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "876": {
      "op": "pushbytes 0x736d6172742d6173612d6170702d69643a",
      "defined_out": [
        "0x736d6172742d6173612d6170702d69643a",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0x736d6172742d6173612d6170702d69643a"
      ]
    },
    "895": {
      "op": "swap",
      "stack_out": [
        "0x736d6172742d6173612d6170702d69643a",
        "tmp%1#0"
      ]
    },
    "896": {
      "op": "concat",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "897": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "899": {
      "op": "dupn 3",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "901": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "903": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "905": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "907": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetURL_idx_0#0"
      ]
    },
    "909": {
      "op": "itxn_field ConfigAssetURL",
      "stack_out": []
    },
    "911": {
      "op": "pushbytes \"SMART-ASA\"",
      "defined_out": [
        "\"SMART-ASA\""
      ],
      "stack_out": [
        "\"SMART-ASA\""
      ]
    },
    "922": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "924": {
      "op": "pushbytes \"S-ASA\"",
      "defined_out": [
        "\"S-ASA\""
      ],
      "stack_out": [
        "\"S-ASA\""
      ]
    },
    "931": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "933": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "934": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "936": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "937": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "939": {
      "op": "intc 4 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615"
      ],
      "stack_out": [
        "18446744073709551615"
      ]
    },
    "941": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "943": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "945": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "947": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "948": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "950": {
      "op": "itxn_submit"
    },
    "951": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "953": {
      "retsub": true,
      "op": "retsub"
    },
    "954": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.itoa",
      "params": {
        "n#0": "uint64"
      },
      "block": "itoa",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "957": {
      "op": "pushbytes 0x",
      "defined_out": [
        "acc#0"
      ],
      "stack_out": [
        "acc#0"
      ]
    },
    "959": {
      "block": "itoa_while_top@1",
      "stack_in": [
        "acc#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "n#0 (copy)"
      ],
      "stack_out": [
        "acc#0",
        "n#0 (copy)"
      ]
    },
    "961": {
      "op": "bz itoa_after_while@3",
      "stack_out": [
        "acc#0"
      ]
    },
    "964": {
      "op": "frame_dig -1",
      "stack_out": [
        "acc#0",
        "n#0 (copy)"
      ]
    },
    "966": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "n#0 (copy)"
      ],
      "stack_out": [
        "acc#0",
        "n#0 (copy)",
        "10"
      ]
    },
    "968": {
      "op": "%",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "acc#0",
        "tmp%1#0"
      ]
    },
    "969": {
      "op": "pushbytes 0x30313233343536373839",
      "defined_out": [
        "0x30313233343536373839",
        "tmp%1#0"
      ],
      "stack_out": [
        "acc#0",
        "tmp%1#0",
        "0x30313233343536373839"
      ]
    },
    "981": {
      "op": "swap",
      "stack_out": [
        "acc#0",
        "0x30313233343536373839",
        "tmp%1#0"
      ]
    },
    "982": {
      "op": "intc_1 // 1",
      "defined_out": [
        "0x30313233343536373839",
        "1",
        "tmp%1#0"
      ],
      "stack_out": [
        "acc#0",
        "0x30313233343536373839",
        "tmp%1#0",
        "1"
      ]
    },
    "983": {
      "op": "extract3",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "acc#0",
        "tmp%2#0"
      ]
    },
    "984": {
      "op": "frame_dig 0",
      "defined_out": [
        "acc#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "acc#0",
        "tmp%2#0",
        "acc#0"
      ]
    },
    "986": {
      "op": "concat",
      "stack_out": [
        "acc#0",
        "acc#0"
      ]
    },
    "987": {
      "op": "frame_bury 0",
      "defined_out": [
        "acc#0"
      ],
      "stack_out": [
        "acc#0"
      ]
    },
    "989": {
      "op": "frame_dig -1",
      "stack_out": [
        "acc#0",
        "n#0 (copy)"
      ]
    },
    "991": {
      "op": "pushint 10 // 10",
      "stack_out": [
        "acc#0",
        "n#0 (copy)",
        "10"
      ]
    },
    "993": {
      "op": "/",
      "defined_out": [
        "acc#0",
        "n#0"
      ],
      "stack_out": [
        "acc#0",
        "n#0"
      ]
    },
    "994": {
      "op": "frame_bury -1",
      "stack_out": [
        "acc#0"
      ]
    },
    "996": {
      "op": "b itoa_while_top@1"
    },
    "999": {
      "block": "itoa_after_while@3",
      "stack_in": [
        "acc#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "acc#0"
      ],
      "stack_out": [
        "acc#0",
        "acc#0"
      ]
    },
    "1001": {
      "op": "dup",
      "defined_out": [
        "acc#0",
        "acc#0 (copy)"
      ],
      "stack_out": [
        "acc#0",
        "acc#0",
        "acc#0 (copy)"
      ]
    },
    "1002": {
      "op": "len",
      "defined_out": [
        "acc#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "acc#0",
        "acc#0",
        "tmp%3#0"
      ]
    },
    "1003": {
      "op": "pushbytes 0x30",
      "defined_out": [
        "0x30",
        "acc#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "acc#0",
        "acc#0",
        "tmp%3#0",
        "0x30"
      ]
    },
    "1006": {
      "op": "cover 2",
      "stack_out": [
        "acc#0",
        "0x30",
        "acc#0",
        "tmp%3#0"
      ]
    },
    "1008": {
      "op": "select",
      "defined_out": [
        "acc#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "acc#0",
        "tmp%5#0"
      ]
    },
    "1009": {
      "op": "swap"
    },
    "1010": {
      "retsub": true,
      "op": "retsub"
    },
    "1011": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_opt_in",
      "params": {
        "asset#0": "uint64",
        "ctrl_asa_opt_in#0": "uint64"
      },
      "block": "asset_opt_in",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1014": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "1016": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1019": {
      "op": "frame_dig -1",
      "defined_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ],
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1021": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1023": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "axfer"
      ]
    },
    "1024": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1025": {
      "error": "Wrong ASA Opt In txn type",
      "op": "assert // Wrong ASA Opt In txn type",
      "stack_out": []
    },
    "1026": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1028": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1030": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0"
      ]
    },
    "1031": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1032": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1033": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "tmp%2#0",
        "maybe_value%0#0"
      ]
    },
    "1034": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1035": {
      "error": "Wrong ASA Opt In ID",
      "op": "assert // Wrong ASA Opt In ID",
      "stack_out": []
    },
    "1036": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1038": {
      "op": "gtxns Sender",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1040": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "1042": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1043": {
      "error": "Wrong ASA Opt In Sender",
      "op": "assert // Wrong ASA Opt In Sender",
      "stack_out": []
    },
    "1044": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1046": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1048": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1050": {
      "op": "==",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1051": {
      "error": "Wrong ASA Opt In Receiver",
      "op": "assert // Wrong ASA Opt In Receiver",
      "stack_out": []
    },
    "1052": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1054": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1056": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1057": {
      "error": "Wrong ASA Opt In Amount",
      "op": "assert // Wrong ASA Opt In Amount",
      "stack_out": []
    },
    "1058": {
      "op": "frame_dig -1",
      "stack_out": [
        "ctrl_asa_opt_in#0 (copy)"
      ]
    },
    "1060": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1062": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "1064": {
      "op": "==",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "1065": {
      "error": "Forbidden Close Out on Opt In",
      "op": "assert // Forbidden Close Out on Opt In",
      "stack_out": []
    },
    "1066": {
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "1068": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "OptIn"
      ]
    },
    "1069": {
      "op": "==",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1070": {
      "error": "Wrong On Complete Action",
      "op": "assert // Wrong On Complete Action",
      "stack_out": []
    },
    "1071": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "1073": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%17#0",
        "asset#0 (copy)"
      ]
    },
    "1075": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "1077": {
      "op": "bury 1",
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "1079": {
      "error": "Missing Controlled ASA",
      "op": "assert // Missing Controlled ASA",
      "stack_out": []
    },
    "1080": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1081": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1082": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1083": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1084": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%20#0"
      ]
    },
    "1086": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "maybe_value%1#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%20#0",
        "\"account_smart_asa_id\""
      ]
    },
    "1087": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%20#0",
        "\"account_smart_asa_id\"",
        "maybe_value%1#0"
      ]
    },
    "1089": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1090": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "1092": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "\"account_frozen\""
      ]
    },
    "1094": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%21#0",
        "\"account_frozen\"",
        "0"
      ]
    },
    "1095": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1096": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1097": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"default_frozen\""
      ]
    },
    "1099": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1100": {
      "error": "check self.default_frozen exists",
      "op": "assert // check self.default_frozen exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1101": {
      "op": "bnz asset_opt_in_if_body@2",
      "stack_out": []
    },
    "1104": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "1106": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%22#0",
        "asset#0 (copy)"
      ]
    },
    "1108": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1110": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1111": {
      "op": "bz asset_opt_in_after_if_else@3",
      "stack_out": []
    },
    "1114": {
      "block": "asset_opt_in_if_body@2",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "1116": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "\"account_frozen\""
      ]
    },
    "1118": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"account_frozen\"",
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "\"account_frozen\"",
        "1"
      ]
    },
    "1119": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1120": {
      "block": "asset_opt_in_after_if_else@3",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1121": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "params": {
        "asset_id#0": "uint64"
      },
      "block": "assert_common_preconditions",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1124": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1125": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1126": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1127": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1128": {
      "error": "Missing Controlled ASA",
      "op": "assert // Missing Controlled ASA",
      "stack_out": []
    },
    "1129": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1130": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1131": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1132": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1133": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_id#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "asset_id#0 (copy)"
      ]
    },
    "1135": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1136": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1137": {
      "retsub": true,
      "op": "retsub"
    },
    "1138": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_config",
      "params": {
        "config_asset#0": "uint64",
        "total#0": "bytes",
        "decimals#0": "bytes",
        "default_frozen#0": "bytes",
        "unit_name#0": "bytes",
        "name#0": "bytes",
        "url#0": "bytes",
        "metadata_hash#0": "bytes",
        "manager_addr#0": "bytes",
        "reserve_addr#0": "bytes",
        "freeze_addr#0": "bytes",
        "clawback_addr#0": "bytes"
      },
      "block": "asset_config",
      "stack_in": [],
      "op": "proto 12 0"
    },
    "1141": {
      "op": "frame_dig -12",
      "defined_out": [
        "config_asset#0 (copy)"
      ],
      "stack_out": [
        "config_asset#0 (copy)"
      ]
    },
    "1143": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1146": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1148": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1149": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"manager_addr\""
      ]
    },
    "1151": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1152": {
      "error": "check self.manager_addr exists",
      "op": "assert // check self.manager_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1153": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1154": {
      "error": "Unauthorized Manager",
      "op": "assert // Unauthorized Manager",
      "stack_out": []
    },
    "1155": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1156": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1157": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1158": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1159": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%1#0",
        "reserve_addr#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "reserve_addr#0 (copy)"
      ]
    },
    "1161": {
      "op": "!=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1162": {
      "op": "bz asset_config_after_if_else@2",
      "stack_out": []
    },
    "1165": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1166": {
      "op": "bytec_1 // \"reserve_addr\"",
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1167": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1168": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1169": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ]
    },
    "1171": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1172": {
      "error": "Reserve Address has been deleted",
      "op": "assert // Reserve Address has been deleted",
      "stack_out": []
    },
    "1173": {
      "block": "asset_config_after_if_else@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1174": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"freeze_addr\""
      ]
    },
    "1176": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1177": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1178": {
      "op": "frame_dig -2",
      "defined_out": [
        "freeze_addr#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "freeze_addr#0 (copy)"
      ]
    },
    "1180": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1181": {
      "op": "bz asset_config_after_if_else@4",
      "stack_out": []
    },
    "1184": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1185": {
      "op": "bytec 5 // \"freeze_addr\"",
      "stack_out": [
        "0",
        "\"freeze_addr\""
      ]
    },
    "1187": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1188": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1189": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%6#0"
      ]
    },
    "1191": {
      "op": "!=",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1192": {
      "error": "Freeze Address has been deleted",
      "op": "assert // Freeze Address has been deleted",
      "stack_out": []
    },
    "1193": {
      "block": "asset_config_after_if_else@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1194": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"clawback_addr\""
      ]
    },
    "1195": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1196": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "1197": {
      "op": "frame_dig -1",
      "defined_out": [
        "clawback_addr#0 (copy)",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "clawback_addr#0 (copy)"
      ]
    },
    "1199": {
      "op": "!=",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1200": {
      "op": "bz asset_config_after_if_else@6",
      "stack_out": []
    },
    "1203": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1204": {
      "op": "bytec_2 // \"clawback_addr\"",
      "stack_out": [
        "0",
        "\"clawback_addr\""
      ]
    },
    "1205": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1206": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "1207": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "tmp%9#0"
      ]
    },
    "1209": {
      "op": "!=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1210": {
      "error": "Clawback Address has been deleted",
      "op": "assert // Clawback Address has been deleted",
      "stack_out": []
    },
    "1211": {
      "block": "asset_config_after_if_else@6",
      "stack_in": [],
      "op": "frame_dig -12",
      "defined_out": [
        "config_asset#0 (copy)"
      ],
      "stack_out": [
        "config_asset#0 (copy)"
      ]
    },
    "1213": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.circulating_supply",
      "op": "callsub circulating_supply",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "1216": {
      "op": "itob",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1217": {
      "op": "frame_dig -11",
      "defined_out": [
        "tmp%12#0",
        "total#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "total#0 (copy)"
      ]
    },
    "1219": {
      "op": "b<=",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "1220": {
      "error": "Invalid Total, must be >= circulating supply",
      "op": "assert // Invalid Total, must be >= circulating supply",
      "stack_out": []
    },
    "1221": {
      "op": "frame_dig -11",
      "stack_out": [
        "total#0 (copy)"
      ]
    },
    "1223": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1224": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"total\""
      ]
    },
    "1226": {
      "op": "swap",
      "stack_out": [
        "\"total\"",
        "new_state_value%0#0"
      ]
    },
    "1227": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1228": {
      "op": "frame_dig -10",
      "defined_out": [
        "decimals#0 (copy)"
      ],
      "stack_out": [
        "decimals#0 (copy)"
      ]
    },
    "1230": {
      "op": "btoi",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "1231": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"decimals\""
      ]
    },
    "1233": {
      "op": "swap",
      "stack_out": [
        "\"decimals\"",
        "new_state_value%1#0"
      ]
    },
    "1234": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1235": {
      "op": "frame_dig -9",
      "defined_out": [
        "default_frozen#0 (copy)"
      ],
      "stack_out": [
        "default_frozen#0 (copy)"
      ]
    },
    "1237": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "default_frozen#0 (copy)"
      ],
      "stack_out": [
        "default_frozen#0 (copy)",
        "0"
      ]
    },
    "1238": {
      "op": "getbit",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "1239": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0",
        "\"default_frozen\""
      ]
    },
    "1241": {
      "op": "swap",
      "stack_out": [
        "\"default_frozen\"",
        "new_state_value%2#0"
      ]
    },
    "1242": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1243": {
      "op": "frame_dig -8",
      "defined_out": [
        "unit_name#0 (copy)"
      ],
      "stack_out": [
        "unit_name#0 (copy)"
      ]
    },
    "1245": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0"
      ]
    },
    "1248": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "new_state_value%3#0",
        "\"unit_name\""
      ]
    },
    "1250": {
      "op": "swap",
      "stack_out": [
        "\"unit_name\"",
        "new_state_value%3#0"
      ]
    },
    "1251": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1252": {
      "op": "frame_dig -7",
      "defined_out": [
        "name#0 (copy)"
      ],
      "stack_out": [
        "name#0 (copy)"
      ]
    },
    "1254": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0"
      ]
    },
    "1257": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\"",
        "new_state_value%4#0"
      ],
      "stack_out": [
        "new_state_value%4#0",
        "\"name\""
      ]
    },
    "1259": {
      "op": "swap",
      "stack_out": [
        "\"name\"",
        "new_state_value%4#0"
      ]
    },
    "1260": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1261": {
      "op": "frame_dig -6",
      "defined_out": [
        "url#0 (copy)"
      ],
      "stack_out": [
        "url#0 (copy)"
      ]
    },
    "1263": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0"
      ]
    },
    "1266": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\"",
        "new_state_value%5#0"
      ],
      "stack_out": [
        "new_state_value%5#0",
        "\"url\""
      ]
    },
    "1268": {
      "op": "swap",
      "stack_out": [
        "\"url\"",
        "new_state_value%5#0"
      ]
    },
    "1269": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1270": {
      "op": "frame_dig -5",
      "defined_out": [
        "metadata_hash#0 (copy)"
      ],
      "stack_out": [
        "metadata_hash#0 (copy)"
      ]
    },
    "1272": {
      "op": "extract 2 0",
      "defined_out": [
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0"
      ]
    },
    "1275": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\"",
        "new_state_value%6#0"
      ],
      "stack_out": [
        "new_state_value%6#0",
        "\"metadata_hash\""
      ]
    },
    "1277": {
      "op": "swap",
      "stack_out": [
        "\"metadata_hash\"",
        "new_state_value%6#0"
      ]
    },
    "1278": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1279": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\""
      ],
      "stack_out": [
        "\"manager_addr\""
      ]
    },
    "1281": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"manager_addr\"",
        "manager_addr#0 (copy)"
      ],
      "stack_out": [
        "\"manager_addr\"",
        "manager_addr#0 (copy)"
      ]
    },
    "1283": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1284": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\""
      ],
      "stack_out": [
        "\"reserve_addr\""
      ]
    },
    "1285": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"reserve_addr\"",
        "reserve_addr#0 (copy)"
      ],
      "stack_out": [
        "\"reserve_addr\"",
        "reserve_addr#0 (copy)"
      ]
    },
    "1287": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1288": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\""
      ],
      "stack_out": [
        "\"freeze_addr\""
      ]
    },
    "1290": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"freeze_addr\"",
        "freeze_addr#0 (copy)"
      ],
      "stack_out": [
        "\"freeze_addr\"",
        "freeze_addr#0 (copy)"
      ]
    },
    "1292": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1293": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\""
      ],
      "stack_out": [
        "\"clawback_addr\""
      ]
    },
    "1294": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"clawback_addr\"",
        "clawback_addr#0 (copy)"
      ],
      "stack_out": [
        "\"clawback_addr\"",
        "clawback_addr#0 (copy)"
      ]
    },
    "1296": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1297": {
      "retsub": true,
      "op": "retsub"
    },
    "1298": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.circulating_supply",
      "params": {
        "ctrl_asset#0": "uint64"
      },
      "block": "circulating_supply",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1301": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1303": {
      "op": "frame_dig -1",
      "defined_out": [
        "ctrl_asset#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "ctrl_asset#0 (copy)"
      ]
    },
    "1305": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "check%0#0"
      ]
    },
    "1307": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "value%0#0"
      ]
    },
    "1308": {
      "op": "intc 4 // 18446744073709551615",
      "defined_out": [
        "18446744073709551615",
        "value%0#0"
      ],
      "stack_out": [
        "value%0#0",
        "18446744073709551615"
      ]
    },
    "1310": {
      "op": "swap",
      "stack_out": [
        "18446744073709551615",
        "value%0#0"
      ]
    },
    "1311": {
      "op": "-",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1312": {
      "retsub": true,
      "op": "retsub"
    },
    "1313": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_transfer",
      "params": {
        "xfer_asset#0": "uint64",
        "asset_amount#0": "bytes",
        "asset_sender#0": "bytes",
        "asset_receiver#0": "bytes"
      },
      "block": "asset_transfer",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1316": {
      "op": "frame_dig -4",
      "defined_out": [
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "xfer_asset#0 (copy)"
      ]
    },
    "1318": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1321": {
      "op": "frame_dig -2"
    },
    "1323": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_sender#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "tmp%0#0"
      ]
    },
    "1325": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1326": {
      "op": "bz asset_transfer_else_body@2",
      "stack_out": []
    },
    "1329": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_amount#0 (copy)"
      ],
      "stack_out": [
        "asset_amount#0 (copy)"
      ]
    },
    "1331": {
      "op": "btoi",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1332": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "asset_receiver#0 (copy)"
      ]
    },
    "1334": {
      "op": "swap",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "tmp%2#0"
      ]
    },
    "1335": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_minting_preconditions",
      "op": "callsub assert_minting_preconditions",
      "stack_out": []
    },
    "1338": {
      "op": "b asset_transfer_after_if_else@9"
    },
    "1341": {
      "block": "asset_transfer_else_body@2",
      "stack_in": [],
      "op": "frame_dig -1"
    },
    "1343": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_receiver#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)",
        "tmp%3#0"
      ]
    },
    "1345": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1346": {
      "op": "bz asset_transfer_else_body@4",
      "stack_out": []
    },
    "1349": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1351": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_burning_preconditions",
      "op": "callsub assert_burning_preconditions",
      "stack_out": []
    },
    "1354": {
      "op": "b asset_transfer_after_if_else@9"
    },
    "1357": {
      "block": "asset_transfer_else_body@4",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1359": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1360": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"clawback_addr\""
      ]
    },
    "1361": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1362": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%0#0"
      ]
    },
    "1363": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1364": {
      "op": "bz asset_transfer_else_body@6",
      "stack_out": []
    },
    "1367": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1369": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "asset_receiver#0 (copy)"
      ]
    },
    "1371": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_clawback_preconditions",
      "op": "callsub assert_clawback_preconditions",
      "stack_out": []
    },
    "1374": {
      "op": "b asset_transfer_after_if_else@9"
    },
    "1377": {
      "block": "asset_transfer_else_body@6",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1379": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "asset_receiver#0 (copy)"
      ]
    },
    "1381": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_regular_transfer_preconditions",
      "op": "callsub assert_regular_transfer_preconditions",
      "stack_out": []
    },
    "1384": {
      "block": "asset_transfer_after_if_else@9",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "asset_amount#0 (copy)"
      ],
      "stack_out": [
        "asset_amount#0 (copy)"
      ]
    },
    "1386": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1387": {
      "op": "frame_dig -4",
      "defined_out": [
        "tmp%7#0",
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "tmp%7#0",
        "xfer_asset#0 (copy)"
      ]
    },
    "1389": {
      "op": "swap",
      "stack_out": [
        "xfer_asset#0 (copy)",
        "tmp%7#0"
      ]
    },
    "1390": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)",
        "tmp%7#0",
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "xfer_asset#0 (copy)",
        "tmp%7#0",
        "asset_sender#0 (copy)"
      ]
    },
    "1392": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)",
        "asset_sender#0 (copy)",
        "tmp%7#0",
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "xfer_asset#0 (copy)",
        "tmp%7#0",
        "asset_sender#0 (copy)",
        "asset_receiver#0 (copy)"
      ]
    },
    "1394": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_transfer",
      "op": "callsub inner_asset_transfer",
      "stack_out": []
    },
    "1397": {
      "retsub": true,
      "op": "retsub"
    },
    "1398": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_minting_preconditions",
      "params": {
        "asset_receiver#0": "bytes",
        "asset_amount#0": "uint64"
      },
      "block": "assert_minting_preconditions",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1401": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1403": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1404": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"reserve_addr\""
      ]
    },
    "1405": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1406": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1407": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1408": {
      "error": "Unauthorized Reserve",
      "op": "assert // Unauthorized Reserve",
      "stack_out": []
    },
    "1409": {
      "op": "frame_dig -2"
    },
    "1411": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset_receiver#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)",
        "tmp%2#0"
      ]
    },
    "1413": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1414": {
      "error": "Forbidden self minting",
      "op": "assert // Forbidden self minting",
      "stack_out": []
    },
    "1415": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1416": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1417": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1418": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1419": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.circulating_supply",
      "op": "callsub circulating_supply",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1422": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_amount#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "asset_amount#0 (copy)"
      ]
    },
    "1424": {
      "op": "+",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "1426": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"total\""
      ]
    },
    "1428": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1429": {
      "error": "check self.total exists",
      "op": "assert // check self.total exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%2#0"
      ]
    },
    "1430": {
      "op": "<=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1431": {
      "error": "Forbidden over minting",
      "op": "assert // Forbidden over minting",
      "stack_out": []
    },
    "1432": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1434": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1435": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1436": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1437": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1438": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "1439": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1440": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1441": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1442": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "1443": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1445": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "1447": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1448": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "1449": {
      "op": "!",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "1450": {
      "error": "Smart ASA is global frozen",
      "op": "assert // Smart ASA is global frozen",
      "stack_out": []
    },
    "1451": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1452": {
      "op": "bytec_1 // \"reserve_addr\"",
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1453": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1454": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "1455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%6#0",
        "0"
      ]
    },
    "1456": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "0",
        "\"clawback_addr\""
      ]
    },
    "1457": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1458": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "maybe_value%6#0",
        "maybe_value%7#0"
      ]
    },
    "1459": {
      "op": "!=",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1460": {
      "op": "bz assert_minting_preconditions_after_if_else@2",
      "stack_out": []
    },
    "1463": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1466": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1468": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1469": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "1470": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "1471": {
      "error": "Receiver account is frozen",
      "op": "assert // Receiver account is frozen",
      "stack_out": []
    },
    "1472": {
      "block": "assert_minting_preconditions_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1473": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_burning_preconditions",
      "params": {
        "asset_sender#0": "bytes"
      },
      "block": "assert_burning_preconditions",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1476": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1478": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1479": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"reserve_addr\""
      ]
    },
    "1480": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1481": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1482": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1483": {
      "error": "Unauthorized Reserve",
      "op": "assert // Unauthorized Reserve",
      "stack_out": []
    },
    "1484": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1486": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1487": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1488": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1489": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1490": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "1491": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1492": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1493": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1494": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1495": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1496": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1497": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "1499": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1500": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "1501": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1502": {
      "error": "Smart ASA is global frozen",
      "op": "assert // Smart ASA is global frozen",
      "stack_out": []
    },
    "1503": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1504": {
      "op": "bytec_1 // \"reserve_addr\"",
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1505": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1506": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1507": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "0"
      ]
    },
    "1508": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "0",
        "\"clawback_addr\""
      ]
    },
    "1509": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1510": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1511": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1512": {
      "op": "bz assert_burning_preconditions_after_if_else@2",
      "stack_out": []
    },
    "1515": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1518": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1520": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1521": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "1522": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1523": {
      "error": "Sender account is frozen",
      "op": "assert // Sender account is frozen",
      "stack_out": []
    },
    "1524": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1525": {
      "op": "bytec_1 // \"reserve_addr\"",
      "stack_out": [
        "0",
        "\"reserve_addr\""
      ]
    },
    "1526": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1527": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "maybe_value%7#0"
      ]
    },
    "1528": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%7#0",
        "asset_sender#0 (copy)"
      ]
    },
    "1530": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1531": {
      "error": "Forbidden clawback burning",
      "op": "assert // Forbidden clawback burning",
      "stack_out": []
    },
    "1532": {
      "block": "assert_burning_preconditions_after_if_else@2",
      "stack_in": [],
      "retsub": true,
      "op": "retsub"
    },
    "1533": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_clawback_preconditions",
      "params": {
        "asset_sender#0": "bytes",
        "asset_receiver#0": "bytes"
      },
      "block": "assert_clawback_preconditions",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1536": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1538": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1539": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1540": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1541": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1542": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1543": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1544": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1545": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1546": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1547": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1548": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1550": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1551": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1552": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1553": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1554": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "1555": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1556": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1557": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1558": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1559": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1560": {
      "retsub": true,
      "op": "retsub"
    },
    "1561": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_regular_transfer_preconditions",
      "params": {
        "asset_sender#0": "bytes",
        "asset_receiver#0": "bytes"
      },
      "block": "assert_regular_transfer_preconditions",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1564": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1566": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "asset_sender#0 (copy)"
      ]
    },
    "1568": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1569": {
      "error": "Unauthorized Clawback",
      "op": "assert // Unauthorized Clawback",
      "stack_out": []
    },
    "1570": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1572": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1573": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1574": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1575": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1576": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1577": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1578": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1579": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1580": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1581": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1582": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1584": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1585": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1586": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1587": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "1589": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1590": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1591": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1592": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1593": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1594": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1595": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "1597": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1598": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "1599": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "1600": {
      "error": "Smart ASA is global frozen",
      "op": "assert // Smart ASA is global frozen",
      "stack_out": []
    },
    "1601": {
      "op": "frame_dig -2",
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1603": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_sender#0 (copy)",
        "0"
      ]
    },
    "1604": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1606": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1607": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%5#0"
      ]
    },
    "1608": {
      "op": "!",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "1609": {
      "error": "Sender account is frozen",
      "op": "assert // Sender account is frozen",
      "stack_out": []
    },
    "1610": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1612": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0"
      ]
    },
    "1613": {
      "op": "bytec 4 // \"account_frozen\"",
      "stack_out": [
        "asset_receiver#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1615": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1616": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "1617": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "1618": {
      "error": "Receiver account is frozen",
      "op": "assert // Receiver account is frozen",
      "stack_out": []
    },
    "1619": {
      "retsub": true,
      "op": "retsub"
    },
    "1620": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_transfer",
      "params": {
        "xfer_asset#0": "uint64",
        "asset_amount#0": "uint64",
        "asset_sender#0": "bytes",
        "asset_receiver#0": "bytes"
      },
      "block": "inner_asset_transfer",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "1623": {
      "op": "itxn_begin"
    },
    "1624": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1626": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "1628": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_receiver#0 (copy)"
      ],
      "stack_out": [
        "asset_receiver#0 (copy)"
      ]
    },
    "1630": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1632": {
      "op": "frame_dig -2",
      "defined_out": [
        "asset_sender#0 (copy)"
      ],
      "stack_out": [
        "asset_sender#0 (copy)"
      ]
    },
    "1634": {
      "op": "itxn_field AssetSender",
      "stack_out": []
    },
    "1636": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_amount#0 (copy)"
      ],
      "stack_out": [
        "asset_amount#0 (copy)"
      ]
    },
    "1638": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "1640": {
      "op": "frame_dig -4",
      "defined_out": [
        "xfer_asset#0 (copy)"
      ],
      "stack_out": [
        "xfer_asset#0 (copy)"
      ]
    },
    "1642": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "1644": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "1645": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1647": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1648": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1650": {
      "op": "itxn_submit"
    },
    "1651": {
      "retsub": true,
      "op": "retsub"
    },
    "1652": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_freeze",
      "params": {
        "freeze_asset#0": "uint64",
        "asset_frozen#0": "bytes"
      },
      "block": "asset_freeze",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1655": {
      "op": "frame_dig -2",
      "defined_out": [
        "freeze_asset#0 (copy)"
      ],
      "stack_out": [
        "freeze_asset#0 (copy)"
      ]
    },
    "1657": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1660": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1662": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1663": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"freeze_addr\""
      ]
    },
    "1665": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1666": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1667": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1668": {
      "error": "Unauthorized Freeze",
      "op": "assert // Unauthorized Freeze",
      "stack_out": []
    },
    "1669": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_frozen#0 (copy)"
      ],
      "stack_out": [
        "asset_frozen#0 (copy)"
      ]
    },
    "1671": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_frozen#0 (copy)",
        "0"
      ]
    },
    "1672": {
      "op": "getbit",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1673": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "\"global_frozen\""
      ]
    },
    "1675": {
      "op": "swap",
      "stack_out": [
        "\"global_frozen\"",
        "new_state_value%0#0"
      ]
    },
    "1676": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1677": {
      "retsub": true,
      "op": "retsub"
    },
    "1678": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.account_freeze",
      "params": {
        "freeze_asset#0": "uint64",
        "freeze_account#0": "bytes",
        "asset_frozen#0": "bytes"
      },
      "block": "account_freeze",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "1681": {
      "op": "frame_dig -3",
      "defined_out": [
        "freeze_asset#0 (copy)"
      ],
      "stack_out": [
        "freeze_asset#0 (copy)"
      ]
    },
    "1683": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1686": {
      "op": "frame_dig -2",
      "defined_out": [
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)"
      ]
    },
    "1688": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)",
        "0"
      ]
    },
    "1689": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1690": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1691": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1692": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1693": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1694": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1695": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1696": {
      "op": "==",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1697": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1698": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1700": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1701": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"freeze_addr\""
      ]
    },
    "1703": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1704": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%2#0"
      ]
    },
    "1705": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1706": {
      "error": "Unauthorized Freeze",
      "op": "assert // Unauthorized Freeze",
      "stack_out": []
    },
    "1707": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_frozen#0 (copy)"
      ],
      "stack_out": [
        "asset_frozen#0 (copy)"
      ]
    },
    "1709": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset_frozen#0 (copy)",
        "0"
      ]
    },
    "1710": {
      "op": "getbit",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1711": {
      "op": "frame_dig -2",
      "stack_out": [
        "new_state_value%0#0",
        "freeze_account#0 (copy)"
      ]
    },
    "1713": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "freeze_account#0 (copy)",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0",
        "freeze_account#0 (copy)",
        "\"account_frozen\""
      ]
    },
    "1715": {
      "op": "uncover 2",
      "stack_out": [
        "freeze_account#0 (copy)",
        "\"account_frozen\"",
        "new_state_value%0#0"
      ]
    },
    "1717": {
      "op": "app_local_put",
      "stack_out": []
    },
    "1718": {
      "retsub": true,
      "op": "retsub"
    },
    "1719": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_close_out",
      "params": {
        "close_asset#0": "uint64",
        "close_to#0": "bytes"
      },
      "block": "asset_close_out",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1722": {
      "op": "frame_dig -2",
      "defined_out": [
        "close_asset#0 (copy)"
      ],
      "stack_out": [
        "close_asset#0 (copy)"
      ]
    },
    "1724": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_close_out_preconditions",
      "op": "callsub assert_close_out_preconditions",
      "stack_out": []
    },
    "1727": {
      "op": "frame_dig -2",
      "stack_out": [
        "close_asset#0 (copy)"
      ]
    },
    "1729": {
      "op": "asset_params_get AssetCreator",
      "defined_out": [
        "creator#0",
        "exists#0"
      ],
      "stack_out": [
        "creator#0",
        "exists#0"
      ]
    },
    "1731": {
      "op": "bz asset_close_out_after_if_else@4",
      "stack_out": [
        "creator#0"
      ]
    },
    "1734": {
      "op": "frame_dig -2",
      "stack_out": [
        "creator#0",
        "close_asset#0 (copy)"
      ]
    },
    "1736": {
      "op": "frame_dig 0",
      "stack_out": [
        "creator#0",
        "close_asset#0 (copy)",
        "creator#0"
      ]
    },
    "1738": {
      "op": "dup",
      "defined_out": [
        "close_asset#0 (copy)",
        "creator#0",
        "creator#0 (copy)"
      ],
      "stack_out": [
        "creator#0",
        "close_asset#0 (copy)",
        "creator#0 (copy)",
        "creator#0 (copy)"
      ]
    },
    "1739": {
      "op": "cover 2",
      "stack_out": [
        "creator#0",
        "creator#0",
        "close_asset#0 (copy)",
        "creator#0 (copy)"
      ]
    },
    "1741": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_close_out_not_destroyed_preconditions",
      "op": "callsub assert_close_out_not_destroyed_preconditions",
      "stack_out": [
        "creator#0",
        "creator#0"
      ]
    },
    "1744": {
      "op": "frame_dig -1",
      "defined_out": [
        "close_to#0 (copy)",
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "creator#0",
        "close_to#0 (copy)"
      ]
    },
    "1746": {
      "op": "!=",
      "defined_out": [
        "creator#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "creator#0",
        "tmp%0#0"
      ]
    },
    "1747": {
      "op": "bz asset_close_out_after_if_else@3",
      "stack_out": [
        "creator#0"
      ]
    },
    "1750": {
      "op": "frame_dig -1",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)"
      ]
    },
    "1752": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)",
        "0"
      ]
    },
    "1753": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "close_to#0 (copy)",
        "creator#0"
      ],
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1754": {
      "op": "app_local_get_ex",
      "defined_out": [
        "creator#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1755": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "creator#0",
        "maybe_value%0#0"
      ]
    },
    "1756": {
      "op": "intc_0 // 0",
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "1757": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0",
        "creator#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1758": {
      "op": "app_global_get_ex",
      "defined_out": [
        "creator#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1759": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "creator#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1760": {
      "op": "==",
      "defined_out": [
        "creator#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "creator#0",
        "tmp%1#0"
      ]
    },
    "1761": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": [
        "creator#0"
      ]
    },
    "1762": {
      "op": "frame_dig -1",
      "stack_out": [
        "creator#0",
        "close_to#0 (copy)"
      ]
    },
    "1764": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_close_out_not_to_creator",
      "op": "callsub assert_close_out_not_to_creator",
      "stack_out": [
        "creator#0"
      ]
    },
    "1767": {
      "block": "asset_close_out_after_if_else@3",
      "stack_in": [
        "creator#0"
      ],
      "op": "txn Sender",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "creator#0",
        "tmp%2#0"
      ]
    },
    "1769": {
      "op": "frame_dig -2",
      "defined_out": [
        "close_asset#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "creator#0",
        "tmp%2#0",
        "close_asset#0 (copy)"
      ]
    },
    "1771": {
      "op": "asset_holding_get AssetBalance",
      "defined_out": [
        "check%0#0",
        "value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "value%0#0",
        "check%0#0"
      ]
    },
    "1773": {
      "error": "account opted into asset",
      "op": "assert // account opted into asset",
      "stack_out": [
        "creator#0",
        "value%0#0"
      ]
    },
    "1774": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0",
        "value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "value%0#0",
        "tmp%3#0"
      ]
    },
    "1776": {
      "op": "frame_dig -2",
      "stack_out": [
        "creator#0",
        "value%0#0",
        "tmp%3#0",
        "close_asset#0 (copy)"
      ]
    },
    "1778": {
      "op": "cover 2",
      "stack_out": [
        "creator#0",
        "close_asset#0 (copy)",
        "value%0#0",
        "tmp%3#0"
      ]
    },
    "1780": {
      "op": "frame_dig -1",
      "defined_out": [
        "close_asset#0 (copy)",
        "close_to#0 (copy)",
        "tmp%3#0",
        "value%0#0"
      ],
      "stack_out": [
        "creator#0",
        "close_asset#0 (copy)",
        "value%0#0",
        "tmp%3#0",
        "close_to#0 (copy)"
      ]
    },
    "1782": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_transfer",
      "op": "callsub inner_asset_transfer",
      "stack_out": [
        "creator#0"
      ]
    },
    "1785": {
      "block": "asset_close_out_after_if_else@4",
      "stack_in": [
        "creator#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1786": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_close_out_preconditions",
      "params": {
        "close_asset#0": "uint64"
      },
      "block": "assert_close_out_preconditions",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1789": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1791": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "1792": {
      "op": "+",
      "defined_out": [
        "asa_close_out_relative_idx#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1793": {
      "op": "dup",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1794": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0"
      ]
    },
    "1796": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "axfer",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "1797": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1798": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1799": {
      "op": "txn OnCompletion",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%1#0"
      ]
    },
    "1801": {
      "op": "intc_3 // CloseOut",
      "defined_out": [
        "CloseOut",
        "asa_close_out_relative_idx#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%1#0",
        "CloseOut"
      ]
    },
    "1802": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%2#0"
      ]
    },
    "1803": {
      "error": "Wrong On Complete Action",
      "op": "assert // Wrong On Complete Action",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1804": {
      "op": "txn Sender",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%3#0"
      ]
    },
    "1806": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "asa_close_out_relative_idx#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%3#0",
        "0"
      ]
    },
    "1807": {
      "op": "bytec_3 // \"account_smart_asa_id\"",
      "defined_out": [
        "\"account_smart_asa_id\"",
        "0",
        "asa_close_out_relative_idx#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%3#0",
        "0",
        "\"account_smart_asa_id\""
      ]
    },
    "1808": {
      "op": "app_local_get_ex",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1809": {
      "error": "check self.account_smart_asa_id exists for account",
      "op": "assert // check self.account_smart_asa_id exists for account",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "maybe_value%0#0"
      ]
    },
    "1810": {
      "op": "frame_dig -1",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "close_asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "maybe_value%0#0",
        "close_asset#0 (copy)"
      ]
    },
    "1812": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%4#0"
      ]
    },
    "1813": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1814": {
      "op": "global GroupSize",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%5#0"
      ]
    },
    "1816": {
      "op": "dig 1",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%5#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1818": {
      "op": ">",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%6#0"
      ]
    },
    "1819": {
      "error": "Invalid Close Out group size",
      "op": "assert // Invalid Close Out group size",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1820": {
      "op": "dup",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1821": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%9#0"
      ]
    },
    "1823": {
      "op": "frame_dig -1",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%9#0",
        "close_asset#0 (copy)"
      ]
    },
    "1825": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%10#0"
      ]
    },
    "1826": {
      "error": "Wrong ASA Close Out ID",
      "op": "assert // Wrong ASA Close Out ID",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1827": {
      "op": "dup",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1828": {
      "op": "gtxns Sender",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%11#0"
      ]
    },
    "1830": {
      "op": "txn Sender",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1832": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%13#0"
      ]
    },
    "1833": {
      "error": "Wrong ASA Close Out Sender",
      "op": "assert // Wrong ASA Close Out Sender",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1834": {
      "op": "dup",
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1835": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%14#0"
      ]
    },
    "1837": {
      "op": "!",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "tmp%15#0"
      ]
    },
    "1838": {
      "error": "Wrong ASA Close Out Amount",
      "op": "assert // Wrong ASA Close Out Amount",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1839": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "1841": {
      "op": "global ZeroAddress",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "1843": {
      "op": "!=",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "1844": {
      "error": "Wrong Close Out on Close Out",
      "op": "assert // Wrong Close Out on Close Out",
      "stack_out": []
    },
    "1845": {
      "retsub": true,
      "op": "retsub"
    },
    "1846": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_close_out_not_destroyed_preconditions",
      "params": {
        "close_asset#0": "uint64",
        "asset_creator#0": "bytes"
      },
      "block": "assert_close_out_not_destroyed_preconditions",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "1849": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1851": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "1"
      ]
    },
    "1852": {
      "op": "+",
      "defined_out": [
        "asa_close_out_relative_idx#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1853": {
      "op": "dup",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "asa_close_out_relative_idx#0 (copy)"
      ]
    },
    "1854": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0"
      ]
    },
    "1856": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "axfer",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "1857": {
      "op": "==",
      "defined_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asa_close_out_relative_idx#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1858": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asa_close_out_relative_idx#0"
      ]
    },
    "1859": {
      "op": "gtxns AssetCloseTo",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1861": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset_creator#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "asset_creator#0 (copy)"
      ]
    },
    "1863": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1864": {
      "error": "Wrong Close Out on Close Out",
      "op": "assert // Wrong Close Out on Close Out",
      "stack_out": []
    },
    "1865": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1866": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"smart_asa_id\""
      ]
    },
    "1867": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1868": {
      "error": "check self.smart_asa_id exists",
      "op": "assert // check self.smart_asa_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1869": {
      "op": "frame_dig -2",
      "defined_out": [
        "close_asset#0 (copy)",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "close_asset#0 (copy)"
      ]
    },
    "1871": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1872": {
      "error": "Invalid Controlled ASA ID",
      "op": "assert // Invalid Controlled ASA ID",
      "stack_out": []
    },
    "1873": {
      "retsub": true,
      "op": "retsub"
    },
    "1874": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.assert_close_out_not_to_creator",
      "params": {
        "close_to#0": "bytes"
      },
      "block": "assert_close_out_not_to_creator",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1877": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1878": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "1880": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1881": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1882": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1883": {
      "error": "Smart ASA is global frozen",
      "op": "assert // Smart ASA is global frozen",
      "stack_out": []
    },
    "1884": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1886": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "1887": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"account_frozen\""
      ]
    },
    "1889": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1890": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "1891": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1892": {
      "error": "Sender account is frozen",
      "op": "assert // Sender account is frozen",
      "stack_out": []
    },
    "1893": {
      "op": "frame_dig -1",
      "defined_out": [
        "close_to#0 (copy)"
      ],
      "stack_out": [
        "close_to#0 (copy)"
      ]
    },
    "1895": {
      "op": "intc_0 // 0",
      "stack_out": [
        "close_to#0 (copy)",
        "0"
      ]
    },
    "1896": {
      "op": "bytec 4 // \"account_frozen\"",
      "stack_out": [
        "close_to#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "1898": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1899": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "1900": {
      "op": "!",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1901": {
      "error": "Close to account is frozen",
      "op": "assert // Close to account is frozen",
      "stack_out": []
    },
    "1902": {
      "retsub": true,
      "op": "retsub"
    },
    "1903": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.asset_destroy",
      "params": {
        "destroy_asset#0": "uint64"
      },
      "block": "asset_destroy",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1906": {
      "op": "frame_dig -1",
      "defined_out": [
        "destroy_asset#0 (copy)"
      ],
      "stack_out": [
        "destroy_asset#0 (copy)"
      ]
    },
    "1908": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "1911": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1913": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1914": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"manager_addr\""
      ]
    },
    "1916": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1917": {
      "error": "check self.manager_addr exists",
      "op": "assert // check self.manager_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1918": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1919": {
      "error": "Unauthorized Manager",
      "op": "assert // Unauthorized Manager",
      "stack_out": []
    },
    "1920": {
      "op": "frame_dig -1",
      "stack_out": [
        "destroy_asset#0 (copy)"
      ]
    },
    "1922": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_destroy",
      "op": "callsub inner_asset_destroy",
      "stack_out": []
    },
    "1925": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\""
      ],
      "stack_out": [
        "\"total\""
      ]
    },
    "1927": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"total\"",
        "0"
      ]
    },
    "1928": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1929": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\""
      ],
      "stack_out": [
        "\"decimals\""
      ]
    },
    "1931": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"decimals\"",
        "0"
      ]
    },
    "1932": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1933": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\""
      ],
      "stack_out": [
        "\"default_frozen\""
      ]
    },
    "1935": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"default_frozen\"",
        "0"
      ]
    },
    "1936": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1937": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\""
      ],
      "stack_out": [
        "\"unit_name\""
      ]
    },
    "1939": {
      "op": "pushbytes \"\"",
      "defined_out": [
        "\"\"",
        "\"unit_name\""
      ],
      "stack_out": [
        "\"unit_name\"",
        "\"\""
      ]
    },
    "1941": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1942": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\""
      ],
      "stack_out": [
        "\"name\""
      ]
    },
    "1944": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"name\"",
        "\"\""
      ]
    },
    "1946": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1947": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\""
      ],
      "stack_out": [
        "\"url\""
      ]
    },
    "1949": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "\"url\"",
        "\"\""
      ]
    },
    "1951": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1952": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\""
      ],
      "stack_out": [
        "\"metadata_hash\""
      ]
    },
    "1954": {
      "op": "pushbytes 0x",
      "defined_out": [
        "\"metadata_hash\"",
        "0x"
      ],
      "stack_out": [
        "\"metadata_hash\"",
        "0x"
      ]
    },
    "1956": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1957": {
      "op": "bytec 7 // \"manager_addr\""
    },
    "1959": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"manager_addr\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_addr\"",
        "new_state_value%0#0"
      ]
    },
    "1961": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1962": {
      "op": "bytec_1 // \"reserve_addr\""
    },
    "1963": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"reserve_addr\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"reserve_addr\"",
        "new_state_value%1#0"
      ]
    },
    "1965": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1966": {
      "op": "bytec 5 // \"freeze_addr\""
    },
    "1968": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"freeze_addr\"",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "\"freeze_addr\"",
        "new_state_value%2#0"
      ]
    },
    "1970": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1971": {
      "op": "bytec_2 // \"clawback_addr\""
    },
    "1972": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"clawback_addr\"",
        "new_state_value%3#0"
      ],
      "stack_out": [
        "\"clawback_addr\"",
        "new_state_value%3#0"
      ]
    },
    "1974": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1975": {
      "op": "bytec_0 // \"smart_asa_id\"",
      "defined_out": [
        "\"smart_asa_id\""
      ],
      "stack_out": [
        "\"smart_asa_id\""
      ]
    },
    "1976": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"smart_asa_id\"",
        "0"
      ]
    },
    "1977": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1978": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\""
      ],
      "stack_out": [
        "\"global_frozen\""
      ]
    },
    "1980": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"global_frozen\"",
        "0"
      ]
    },
    "1981": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1982": {
      "retsub": true,
      "op": "retsub"
    },
    "1983": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.inner_asset_destroy",
      "params": {
        "destroy_asset#0": "uint64"
      },
      "block": "inner_asset_destroy",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1986": {
      "op": "itxn_begin"
    },
    "1987": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1989": {
      "op": "itxn_field Sender",
      "stack_out": []
    },
    "1991": {
      "op": "frame_dig -1",
      "defined_out": [
        "destroy_asset#0 (copy)"
      ],
      "stack_out": [
        "destroy_asset#0 (copy)"
      ]
    },
    "1993": {
      "op": "itxn_field ConfigAsset",
      "stack_out": []
    },
    "1995": {
      "op": "pushint 3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "1997": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1999": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2000": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "2002": {
      "op": "itxn_submit"
    },
    "2003": {
      "retsub": true,
      "op": "retsub"
    },
    "2004": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.get_asset_config",
      "params": {
        "asset#0": "uint64"
      },
      "block": "get_asset_config",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2007": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "2009": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "2012": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2013": {
      "op": "bytec 8 // \"total\"",
      "defined_out": [
        "\"total\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"total\""
      ]
    },
    "2015": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2016": {
      "error": "check self.total exists",
      "op": "assert // check self.total exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2017": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2018": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "0"
      ]
    },
    "2019": {
      "op": "bytec 10 // \"decimals\"",
      "defined_out": [
        "\"decimals\"",
        "0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0",
        "\"decimals\""
      ]
    },
    "2021": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "2022": {
      "error": "check self.decimals exists",
      "op": "assert // check self.decimals exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "maybe_value%1#0"
      ]
    },
    "2023": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "2024": {
      "op": "extract 4 4",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "2027": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "0"
      ]
    },
    "2028": {
      "op": "bytec 9 // \"default_frozen\"",
      "defined_out": [
        "\"default_frozen\"",
        "0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "0",
        "\"default_frozen\""
      ]
    },
    "2030": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "2031": {
      "error": "check self.default_frozen exists",
      "op": "assert // check self.default_frozen exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%2#0"
      ]
    },
    "2032": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "0x00"
      ]
    },
    "2034": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%2#0",
        "0x00",
        "0"
      ]
    },
    "2035": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "0x00",
        "0",
        "maybe_value%2#0"
      ]
    },
    "2037": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0"
      ]
    },
    "2038": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "0"
      ]
    },
    "2039": {
      "op": "bytec 11 // \"unit_name\"",
      "defined_out": [
        "\"unit_name\"",
        "0",
        "encoded_bool%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "0",
        "\"unit_name\""
      ]
    },
    "2041": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "2042": {
      "error": "check self.unit_name exists",
      "op": "assert // check self.unit_name exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0"
      ]
    },
    "2043": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "maybe_value%3#0 (copy)"
      ]
    },
    "2044": {
      "op": "len",
      "defined_out": [
        "encoded_bool%0#0",
        "length%0#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "length%0#0"
      ]
    },
    "2045": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "as_bytes%0#0"
      ]
    },
    "2046": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "length_uint16%0#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "maybe_value%3#0",
        "length_uint16%0#0"
      ]
    },
    "2049": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "length_uint16%0#0",
        "maybe_value%3#0"
      ]
    },
    "2050": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0"
      ]
    },
    "2051": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "0"
      ]
    },
    "2052": {
      "op": "bytec 12 // \"name\"",
      "defined_out": [
        "\"name\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "0",
        "\"name\""
      ]
    },
    "2054": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "2055": {
      "error": "check self.name exists",
      "op": "assert // check self.name exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0"
      ]
    },
    "2056": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)"
      ]
    },
    "2057": {
      "op": "len",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "length%1#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "length%1#0"
      ]
    },
    "2058": {
      "op": "itob",
      "defined_out": [
        "as_bytes%1#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "as_bytes%1#0"
      ]
    },
    "2059": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "maybe_value%4#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "maybe_value%4#0",
        "length_uint16%1#0"
      ]
    },
    "2062": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "length_uint16%1#0",
        "maybe_value%4#0"
      ]
    },
    "2063": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0"
      ]
    },
    "2064": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0"
      ]
    },
    "2065": {
      "op": "bytec 13 // \"url\"",
      "defined_out": [
        "\"url\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "0",
        "\"url\""
      ]
    },
    "2067": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "2068": {
      "error": "check self.url exists",
      "op": "assert // check self.url exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0"
      ]
    },
    "2069": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "2070": {
      "op": "len",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length%2#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "length%2#0"
      ]
    },
    "2071": {
      "op": "itob",
      "defined_out": [
        "as_bytes%2#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "as_bytes%2#0"
      ]
    },
    "2072": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "maybe_value%5#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "maybe_value%5#0",
        "length_uint16%2#0"
      ]
    },
    "2075": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "length_uint16%2#0",
        "maybe_value%5#0"
      ]
    },
    "2076": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0"
      ]
    },
    "2077": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "0"
      ]
    },
    "2078": {
      "op": "bytec 14 // \"metadata_hash\"",
      "defined_out": [
        "\"metadata_hash\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "0",
        "\"metadata_hash\""
      ]
    },
    "2080": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "2081": {
      "error": "check self.metadata_hash exists",
      "op": "assert // check self.metadata_hash exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0"
      ]
    },
    "2082": {
      "op": "dup",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "maybe_value%6#0 (copy)",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "maybe_value%6#0 (copy)"
      ]
    },
    "2083": {
      "op": "len",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length%3#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "length%3#0"
      ]
    },
    "2084": {
      "op": "itob",
      "defined_out": [
        "as_bytes%3#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "as_bytes%3#0"
      ]
    },
    "2085": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "maybe_value%6#0",
        "length_uint16%3#0"
      ]
    },
    "2088": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "length_uint16%3#0",
        "maybe_value%6#0"
      ]
    },
    "2089": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ]
    },
    "2090": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "0"
      ]
    },
    "2091": {
      "op": "bytec 7 // \"manager_addr\"",
      "defined_out": [
        "\"manager_addr\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "0",
        "\"manager_addr\""
      ]
    },
    "2093": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "2094": {
      "error": "check self.manager_addr exists",
      "op": "assert // check self.manager_addr exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0"
      ]
    },
    "2095": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "0"
      ]
    },
    "2096": {
      "op": "bytec_1 // \"reserve_addr\"",
      "defined_out": [
        "\"reserve_addr\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "0",
        "\"reserve_addr\""
      ]
    },
    "2097": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_exists%8#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "2098": {
      "error": "check self.reserve_addr exists",
      "op": "assert // check self.reserve_addr exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ]
    },
    "2099": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "0"
      ]
    },
    "2100": {
      "op": "bytec 5 // \"freeze_addr\"",
      "defined_out": [
        "\"freeze_addr\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "0",
        "\"freeze_addr\""
      ]
    },
    "2102": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_exists%9#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "2103": {
      "error": "check self.freeze_addr exists",
      "op": "assert // check self.freeze_addr exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ]
    },
    "2104": {
      "op": "intc_0 // 0",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "0"
      ]
    },
    "2105": {
      "op": "bytec_2 // \"clawback_addr\"",
      "defined_out": [
        "\"clawback_addr\"",
        "0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "0",
        "\"clawback_addr\""
      ]
    },
    "2106": {
      "op": "app_global_get_ex",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "2107": {
      "error": "check self.clawback_addr exists",
      "op": "assert // check self.clawback_addr exists",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0"
      ]
    },
    "2108": {
      "op": "uncover 10"
    },
    "2110": {
      "op": "uncover 10",
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "2112": {
      "op": "concat",
      "defined_out": [
        "encoded_bool%0#0",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "2113": {
      "op": "uncover 9",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%2#0",
        "encoded_bool%0#0"
      ]
    },
    "2115": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "2116": {
      "op": "pushbytes 0x0095",
      "defined_out": [
        "0x0095",
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%3#0",
        "0x0095"
      ]
    },
    "2120": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2121": {
      "op": "dig 8",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%0#0 (copy)",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0 (copy)"
      ]
    },
    "2123": {
      "op": "len",
      "defined_out": [
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "data_length%0#0"
      ]
    },
    "2124": {
      "op": "pushint 149 // 149",
      "defined_out": [
        "149",
        "data_length%0#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "data_length%0#0",
        "149"
      ]
    },
    "2127": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%1#0"
      ]
    },
    "2128": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%1#0",
        "current_tail_offset%1#0 (copy)"
      ]
    },
    "2129": {
      "op": "itob",
      "defined_out": [
        "as_bytes%5#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%1#0",
        "as_bytes%5#0"
      ]
    },
    "2130": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "offset_as_uint16%1#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%4#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2133": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "offset_as_uint16%1#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "2135": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%4#0",
        "offset_as_uint16%1#0"
      ]
    },
    "2136": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2137": {
      "op": "dig 8",
      "defined_out": [
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%1#0 (copy)",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%1#0 (copy)"
      ]
    },
    "2139": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%1#0",
        "data_length%1#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%1#0",
        "encoded_tuple_buffer%5#0",
        "data_length%1#0"
      ]
    },
    "2140": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "data_length%1#0",
        "current_tail_offset%1#0"
      ]
    },
    "2142": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0"
      ]
    },
    "2143": {
      "op": "dup",
      "defined_out": [
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0",
        "current_tail_offset%2#0 (copy)"
      ]
    },
    "2144": {
      "op": "itob",
      "defined_out": [
        "as_bytes%6#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0",
        "as_bytes%6#0"
      ]
    },
    "2145": {
      "op": "extract 6 2",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "offset_as_uint16%2#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%5#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0"
      ]
    },
    "2148": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "offset_as_uint16%2#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "2150": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%5#0",
        "offset_as_uint16%2#0"
      ]
    },
    "2151": {
      "op": "concat",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "2152": {
      "op": "dig 7",
      "defined_out": [
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%2#0 (copy)",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%2#0 (copy)"
      ]
    },
    "2154": {
      "op": "len",
      "defined_out": [
        "current_tail_offset%2#0",
        "data_length%2#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "current_tail_offset%2#0",
        "encoded_tuple_buffer%6#0",
        "data_length%2#0"
      ]
    },
    "2155": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%6#0",
        "data_length%2#0",
        "current_tail_offset%2#0"
      ]
    },
    "2157": {
      "op": "+",
      "defined_out": [
        "current_tail_offset%3#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%6#0",
        "current_tail_offset%3#0"
      ]
    },
    "2158": {
      "op": "itob",
      "defined_out": [
        "as_bytes%7#0",
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%6#0",
        "as_bytes%7#0"
      ]
    },
    "2159": {
      "op": "extract 6 2",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "offset_as_uint16%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%6#0",
        "offset_as_uint16%3#0"
      ]
    },
    "2162": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%7#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "2163": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%7#0",
        "maybe_value%7#0"
      ]
    },
    "2165": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "2166": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%8#0",
        "maybe_value%8#0"
      ]
    },
    "2168": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%9#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%9#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%9#0"
      ]
    },
    "2169": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%9#0",
        "maybe_value%9#0"
      ]
    },
    "2171": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%10#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "maybe_value%10#0",
        "encoded_tuple_buffer%10#0"
      ]
    },
    "2172": {
      "op": "swap",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%10#0",
        "maybe_value%10#0"
      ]
    },
    "2173": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%11#0",
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%11#0"
      ]
    },
    "2174": {
      "op": "uncover 4",
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%11#0",
        "encoded_value%0#0"
      ]
    },
    "2176": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%12#0",
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%1#0",
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%12#0"
      ]
    },
    "2177": {
      "op": "uncover 3",
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%12#0",
        "encoded_value%1#0"
      ]
    },
    "2179": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%13#0",
        "encoded_value%2#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%2#0",
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0"
      ]
    },
    "2180": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%13#0",
        "encoded_value%2#0"
      ]
    },
    "2182": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_value%3#0"
      ],
      "stack_out": [
        "encoded_value%3#0",
        "encoded_tuple_buffer%14#0"
      ]
    },
    "2183": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%14#0",
        "encoded_value%3#0"
      ]
    },
    "2184": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%15#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%15#0"
      ]
    },
    "2185": {
      "retsub": true,
      "op": "retsub"
    },
    "2186": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.get_asset_is_frozen",
      "params": {
        "freeze_asset#0": "uint64"
      },
      "block": "get_asset_is_frozen",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2189": {
      "op": "frame_dig -1",
      "defined_out": [
        "freeze_asset#0 (copy)"
      ],
      "stack_out": [
        "freeze_asset#0 (copy)"
      ]
    },
    "2191": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "2194": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "2195": {
      "op": "bytec 6 // \"global_frozen\"",
      "defined_out": [
        "\"global_frozen\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"global_frozen\""
      ]
    },
    "2197": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2198": {
      "error": "check self.global_frozen exists",
      "op": "assert // check self.global_frozen exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2199": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "2201": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0x00",
        "0"
      ]
    },
    "2202": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_value%0#0"
      ]
    },
    "2204": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "2205": {
      "retsub": true,
      "op": "retsub"
    },
    "2206": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.get_account_is_frozen",
      "params": {
        "freeze_asset#0": "uint64",
        "freeze_account#0": "bytes"
      },
      "block": "get_account_is_frozen",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "2209": {
      "op": "frame_dig -2",
      "defined_out": [
        "freeze_asset#0 (copy)"
      ],
      "stack_out": [
        "freeze_asset#0 (copy)"
      ]
    },
    "2211": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "2214": {
      "op": "frame_dig -1",
      "defined_out": [
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)"
      ]
    },
    "2216": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)",
        "0"
      ]
    },
    "2217": {
      "op": "bytec 4 // \"account_frozen\"",
      "defined_out": [
        "\"account_frozen\"",
        "0",
        "freeze_account#0 (copy)"
      ],
      "stack_out": [
        "freeze_account#0 (copy)",
        "0",
        "\"account_frozen\""
      ]
    },
    "2219": {
      "op": "app_local_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "2220": {
      "error": "check self.account_frozen exists for account",
      "op": "assert // check self.account_frozen exists for account",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "2221": {
      "op": "bytec 16 // 0x00",
      "defined_out": [
        "0x00",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0x00"
      ]
    },
    "2223": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0x00",
        "0"
      ]
    },
    "2224": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "maybe_value%0#0"
      ]
    },
    "2226": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "2227": {
      "retsub": true,
      "op": "retsub"
    },
    "2228": {
      "subroutine": "smart_contracts.smart_asa.contract.SmartAsa.get_circulating_supply",
      "params": {
        "asset#0": "uint64"
      },
      "block": "get_circulating_supply",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "2231": {
      "op": "frame_dig -1",
      "defined_out": [
        "asset#0 (copy)"
      ],
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "2233": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.assert_common_preconditions",
      "op": "callsub assert_common_preconditions",
      "stack_out": []
    },
    "2236": {
      "op": "frame_dig -1",
      "stack_out": [
        "asset#0 (copy)"
      ]
    },
    "2238": {
      "callsub": "smart_contracts.smart_asa.contract.SmartAsa.circulating_supply",
      "op": "callsub circulating_supply",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "2241": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "2242": {
      "retsub": true,
      "op": "retsub"
    }
  }
}