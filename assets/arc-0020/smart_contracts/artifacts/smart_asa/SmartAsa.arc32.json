{
    "hints": {
        "asset_create(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_opt_in(asset,axfer)void": {
            "call_config": {
                "opt_in": "CALL"
            }
        },
        "asset_config(asset,uint64,uint32,bool,string,string,string,byte[],address,address,address,address)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_transfer(asset,uint64,account,account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_freeze(asset,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "account_freeze(asset,account,bool)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "asset_close_out(asset,account)void": {
            "call_config": {
                "close_out": "CALL"
            }
        },
        "asset_destroy(asset)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_asset_config(asset)(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "AssetConfig",
                    "elements": [
                        [
                            "total",
                            "uint64"
                        ],
                        [
                            "decimals",
                            "uint32"
                        ],
                        [
                            "default_frozen",
                            "bool"
                        ],
                        [
                            "unit_name",
                            "string"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "url",
                            "string"
                        ],
                        [
                            "metadata_hash",
                            "byte[]"
                        ],
                        [
                            "manager_addr",
                            "address"
                        ],
                        [
                            "reserve_addr",
                            "address"
                        ],
                        [
                            "freeze_addr",
                            "address"
                        ],
                        [
                            "clawback_addr",
                            "address"
                        ]
                    ]
                }
            }
        },
        "get_asset_is_frozen(asset)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_account_is_frozen(asset,account)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_circulating_supply(asset)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuc21hcnRfYXNhLmNvbnRyYWN0LlNtYXJ0QXNhLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 8,
            "num_uints": 5
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 2
        }
    },
    "schema": {
        "global": {
            "declared": {
                "clawback_addr": {
                    "type": "bytes",
                    "key": "clawback_addr"
                },
                "decimals": {
                    "type": "uint64",
                    "key": "decimals"
                },
                "default_frozen": {
                    "type": "uint64",
                    "key": "default_frozen"
                },
                "freeze_addr": {
                    "type": "bytes",
                    "key": "freeze_addr"
                },
                "global_frozen": {
                    "type": "uint64",
                    "key": "global_frozen"
                },
                "manager_addr": {
                    "type": "bytes",
                    "key": "manager_addr"
                },
                "metadata_hash": {
                    "type": "bytes",
                    "key": "metadata_hash"
                },
                "name": {
                    "type": "bytes",
                    "key": "name"
                },
                "reserve_addr": {
                    "type": "bytes",
                    "key": "reserve_addr"
                },
                "smart_asa_id": {
                    "type": "uint64",
                    "key": "smart_asa_id"
                },
                "total": {
                    "type": "uint64",
                    "key": "total"
                },
                "unit_name": {
                    "type": "bytes",
                    "key": "unit_name"
                },
                "url": {
                    "type": "bytes",
                    "key": "url"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "account_frozen": {
                    "type": "uint64",
                    "key": "account_frozen"
                },
                "account_smart_asa_id": {
                    "type": "uint64",
                    "key": "account_smart_asa_id"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "SmartAsa",
        "desc": "\n    ARC-0020 (Smart ASA) - Reference Implementation\n    ",
        "methods": [
            {
                "name": "asset_create",
                "args": [
                    {
                        "type": "uint64",
                        "name": "total",
                        "desc": "The total number of base units of the Smart ASA to create"
                    },
                    {
                        "type": "uint32",
                        "name": "decimals",
                        "desc": "The number of digits to use after the decimal point when displaying the Smart ASA"
                    },
                    {
                        "type": "bool",
                        "name": "default_frozen",
                        "desc": "Smart ASA default frozen (True to freeze holdings by default)"
                    },
                    {
                        "type": "string",
                        "name": "unit_name",
                        "desc": "The name of a unit of Smart ASA"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The name of the Smart ASA"
                    },
                    {
                        "type": "string",
                        "name": "url",
                        "desc": "Smart ASA external URL"
                    },
                    {
                        "type": "byte[]",
                        "name": "metadata_hash",
                        "desc": "Smart ASA metadata hash"
                    },
                    {
                        "type": "address",
                        "name": "manager_addr",
                        "desc": "Account that can manage the configuration of the Smart ASA and destroy it"
                    },
                    {
                        "type": "address",
                        "name": "reserve_addr",
                        "desc": "Account that holds the reserve (non-minted) units of Smart ASA and can mint or burn it"
                    },
                    {
                        "type": "address",
                        "name": "freeze_addr",
                        "desc": "Account that can freeze/unfreeze holdings of the Smart ASA globally or locally"
                    },
                    {
                        "type": "address",
                        "name": "clawback_addr",
                        "desc": "Account that can clawback holdings of the Smart ASA"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "Controlled ASA ID"
                },
                "desc": "Create the Controlled ASA"
            },
            {
                "name": "asset_opt_in",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "Smart ASA ID"
                    },
                    {
                        "type": "axfer",
                        "name": "ctrl_asa_opt_in",
                        "desc": "Controlled ASA opt in transaction"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Smart ASA opt in (App and Controlled ASA)"
            },
            {
                "name": "asset_config",
                "args": [
                    {
                        "type": "asset",
                        "name": "config_asset",
                        "desc": "Smart ASA ID to configure"
                    },
                    {
                        "type": "uint64",
                        "name": "total",
                        "desc": "Total number of base units if the Smart ASA. It can not be less than current circulating supply"
                    },
                    {
                        "type": "uint32",
                        "name": "decimals",
                        "desc": "The number of digits to use after the decimal point when displaying the Smart ASA"
                    },
                    {
                        "type": "bool",
                        "name": "default_frozen",
                        "desc": "Smart ASA default frozen (True to freeze holdings by default)"
                    },
                    {
                        "type": "string",
                        "name": "unit_name",
                        "desc": "The name of a unit of Smart ASA"
                    },
                    {
                        "type": "string",
                        "name": "name",
                        "desc": "The name of the Smart ASA"
                    },
                    {
                        "type": "string",
                        "name": "url",
                        "desc": "Smart ASA external URL"
                    },
                    {
                        "type": "byte[]",
                        "name": "metadata_hash",
                        "desc": "Smart ASA metadata hash"
                    },
                    {
                        "type": "address",
                        "name": "manager_addr",
                        "desc": "Account that can manage the configuration of the Smart ASA and destroy it"
                    },
                    {
                        "type": "address",
                        "name": "reserve_addr",
                        "desc": "Account that holds the reserve (non-minted) units of Smart ASA and can mint or burn it"
                    },
                    {
                        "type": "address",
                        "name": "freeze_addr",
                        "desc": "Account that can freeze/unfreeze holdings of the Smart ASA globally or locally"
                    },
                    {
                        "type": "address",
                        "name": "clawback_addr",
                        "desc": "Account that can clawback holdings of the Smart ASA"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Configure Smart ASA (for unchanged parameters use existing value - no optional args on AVM)"
            },
            {
                "name": "asset_transfer",
                "args": [
                    {
                        "type": "asset",
                        "name": "xfer_asset",
                        "desc": "Smart ASA ID to transfer"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_amount",
                        "desc": "Amount to transfer"
                    },
                    {
                        "type": "account",
                        "name": "asset_sender",
                        "desc": "Smart ASA sender"
                    },
                    {
                        "type": "account",
                        "name": "asset_receiver",
                        "desc": "Smart ASA receiver"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Smart ASA transfers: regular, clawback, mint, burn"
            },
            {
                "name": "asset_freeze",
                "args": [
                    {
                        "type": "asset",
                        "name": "freeze_asset",
                        "desc": "Smart ASA ID to globally freeze/unfreeze"
                    },
                    {
                        "type": "bool",
                        "name": "asset_frozen",
                        "desc": "Smart ASA frozen status"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Smart ASA global freeze (all accounts)"
            },
            {
                "name": "account_freeze",
                "args": [
                    {
                        "type": "asset",
                        "name": "freeze_asset",
                        "desc": "Smart ASA ID to locally freeze/unfreeze"
                    },
                    {
                        "type": "account",
                        "name": "freeze_account",
                        "desc": "Account to freeze/unfreeze"
                    },
                    {
                        "type": "bool",
                        "name": "asset_frozen",
                        "desc": "Smart ASA frozen status"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Smart ASA local freeze (account specific)"
            },
            {
                "name": "asset_close_out",
                "args": [
                    {
                        "type": "asset",
                        "name": "close_asset",
                        "desc": "Smart ASA ID to close out"
                    },
                    {
                        "type": "account",
                        "name": "close_to",
                        "desc": "Account to send all the Smart ASA remainder to."
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Smart ASA close out (App and Controlled ASA)"
            },
            {
                "name": "asset_destroy",
                "args": [
                    {
                        "type": "asset",
                        "name": "destroy_asset",
                        "desc": "Smart ASA ID to destroy"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Destroy the Controlled ASA"
            },
            {
                "name": "get_asset_config",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "Smart ASA ID"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint32,bool,string,string,string,byte[],address,address,address,address)",
                    "desc": "Smart ASA configuration parameters"
                },
                "desc": "Get Smart ASA configuration"
            },
            {
                "name": "get_asset_is_frozen",
                "args": [
                    {
                        "type": "asset",
                        "name": "freeze_asset",
                        "desc": "Smart ASA ID"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool",
                    "desc": "Smart ASA global frozen status"
                },
                "desc": "Get Smart ASA global frozen status"
            },
            {
                "name": "get_account_is_frozen",
                "args": [
                    {
                        "type": "asset",
                        "name": "freeze_asset",
                        "desc": "Smart ASA ID"
                    },
                    {
                        "type": "account",
                        "name": "freeze_account",
                        "desc": "Account to check"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool",
                    "desc": "Smart ASA account frozen status"
                },
                "desc": "Get Smart ASA account frozen status"
            },
            {
                "name": "get_circulating_supply",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset",
                        "desc": "Smart ASA ID"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64",
                    "desc": "Smart ASA circulating supply"
                },
                "desc": "Get Smart ASA circulating supply"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}